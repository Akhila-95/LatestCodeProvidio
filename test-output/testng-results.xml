<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="35" total="110" passed="74" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-02-01T18:31:50 IST" name="Providio Regression Test" finished-at="2024-02-01T19:00:12 IST" duration-ms="1702233">
    <groups>
      <group name="regression">
        <method signature="launchBrowsering.verifyHomePageLaunching()[pri:0, instance:browser.launchBrowsering@77b919a3]" name="verifyHomePageLaunching" class="browser.launchBrowsering"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCartPagePaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" name="verifyingOrderIsPlacingWithCartPagePaypal" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCombinationOfGcAndCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" name="verifyingOrderIsPlacingWithCombinationOfGcAndCreditCard" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCombinationOfGcAndPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" name="verifyingOrderIsPlacingWithCombinationOfGcAndPaypal" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" name="verifyingOrderIsPlacingWithCreditCard" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithGiftCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" name="verifyingOrderIsPlacingWithGiftCard" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithMiniCartPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" name="verifyingOrderIsPlacingWithMiniCartPaypal" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" name="verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalFromCheckoutPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" name="verifyingOrderIsPlacingWithPaypalFromCheckoutPage" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="ShippingPageTest.verifyingAddNewShippingAddress()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" name="verifyingAddNewShippingAddress" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingAllErrorsInShippingForm()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" name="verifyingAllErrorsInShippingForm" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingTheAddressError()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" name="verifyingTheAddressError" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingTheErrorsInFirstName()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" name="verifyingTheErrorsInFirstName" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingTheErrorsInLastName()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" name="verifyingTheErrorsInLastName" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingUpdateShippingAddress()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" name="verifyingUpdateShippingAddress" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingWithValidShippingAddress()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" name="verifyingWithValidShippingAddress" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingphoneNumberError()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" name="verifyingphoneNumberError" class="testScripts.ShippingPageTest"/>
      </group> <!-- regression -->
      <group name="smoke">
        <method signature="launchBrowsering.verifyHomePageLaunching()[pri:0, instance:browser.launchBrowsering@77b919a3]" name="verifyHomePageLaunching" class="browser.launchBrowsering"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCartPagePaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" name="verifyingOrderIsPlacingWithCartPagePaypal" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCombinationOfGcAndCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" name="verifyingOrderIsPlacingWithCombinationOfGcAndCreditCard" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCombinationOfGcAndPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" name="verifyingOrderIsPlacingWithCombinationOfGcAndPaypal" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" name="verifyingOrderIsPlacingWithCreditCard" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithGiftCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" name="verifyingOrderIsPlacingWithGiftCard" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithMiniCartPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" name="verifyingOrderIsPlacingWithMiniCartPaypal" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" name="verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalFromCheckoutPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" name="verifyingOrderIsPlacingWithPaypalFromCheckoutPage" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="ShippingPageTest.verifyingAddNewShippingAddress()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" name="verifyingAddNewShippingAddress" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingAllErrorsInShippingForm()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" name="verifyingAllErrorsInShippingForm" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingTheAddressError()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" name="verifyingTheAddressError" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingTheErrorsInFirstName()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" name="verifyingTheErrorsInFirstName" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingTheErrorsInLastName()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" name="verifyingTheErrorsInLastName" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingUpdateShippingAddress()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" name="verifyingUpdateShippingAddress" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingWithValidShippingAddress()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" name="verifyingWithValidShippingAddress" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingphoneNumberError()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" name="verifyingphoneNumberError" class="testScripts.ShippingPageTest"/>
      </group> <!-- smoke -->
    </groups>
    <test started-at="2024-02-01T18:31:50 IST" name="SmokeTest" finished-at="2024-02-01T19:00:12 IST" duration-ms="1702233">
      <class name="browser.launchBrowsering">
        <test-method is-config="true" signature="setUpforReport()[pri:0, instance:browser.launchBrowsering@77b919a3]" started-at="2024-02-01T18:31:43 IST" name="setUpforReport" finished-at="2024-02-01T18:31:50 IST" duration-ms="6883" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpforReport -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:browser.launchBrowsering@77b919a3]" started-at="2024-02-01T18:31:50 IST" name="setUp" finished-at="2024-02-01T18:31:52 IST" duration-ms="2096" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:browser.launchBrowsering@77b919a3]" started-at="2024-02-01T18:31:52 IST" name="afterClass" finished-at="2024-02-01T18:31:52 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void browser.launchBrowsering.verifyHomePageLaunching() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyHomePageLaunching()[pri:0, instance:browser.launchBrowsering@77b919a3]" started-at="2024-02-01T18:31:52 IST" name="verifyHomePageLaunching" finished-at="2024-02-01T18:31:59 IST" duration-ms="6966" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyHomePageLaunching -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:browser.launchBrowsering@77b919a3]" started-at="2024-02-01T18:31:59 IST" name="afterMethod" finished-at="2024-02-01T18:32:00 IST" duration-ms="566" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyHomePageLaunching status=SUCCESS method=launchBrowsering.verifyHomePageLaunching()[pri:0, instance:browser.launchBrowsering@77b919a3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:browser.launchBrowsering@77b919a3]" started-at="2024-02-01T19:00:13 IST" name="tearDown" finished-at="2024-02-01T19:00:21 IST" duration-ms="8446" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- browser.launchBrowsering -->
      <class name="testScripts.GiftCertificateTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138]" started-at="2024-02-01T18:32:26 IST" name="setUp" finished-at="2024-02-01T18:32:28 IST" duration-ms="2018" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138]" started-at="2024-02-01T18:32:28 IST" name="afterClass" finished-at="2024-02-01T18:32:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.GiftCertificateTest.verifyErrorMsgsInGiftCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyErrorMsgsInGiftCard()[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138]" started-at="2024-02-01T18:32:28 IST" name="verifyErrorMsgsInGiftCard" finished-at="2024-02-01T18:32:36 IST" duration-ms="7505" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyErrorMsgsInGiftCard -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138]" started-at="2024-02-01T18:32:36 IST" name="afterMethod" finished-at="2024-02-01T18:32:36 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyErrorMsgsInGiftCard status=SUCCESS method=GiftCertificateTest.verifyErrorMsgsInGiftCard()[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifytheErrorsFromName_Recipients_confirmRecipientEMail()[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138]" started-at="2024-02-01T18:32:36 IST" name="verifytheErrorsFromName_Recipients_confirmRecipientEMail" finished-at="2024-02-01T18:32:45 IST" duration-ms="9135" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifytheErrorsFromName_Recipients_confirmRecipientEMail -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138]" started-at="2024-02-01T18:32:36 IST" name="afterClass" finished-at="2024-02-01T18:32:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.GiftCertificateTest.verifytheErrorsFromName_Recipients_confirmRecipientEMail() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138]" started-at="2024-02-01T18:32:45 IST" name="afterMethod" finished-at="2024-02-01T18:32:45 IST" duration-ms="33" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifytheErrorsFromName_Recipients_confirmRecipientEMail status=SUCCESS method=GiftCertificateTest.verifytheErrorsFromName_Recipients_confirmRecipientEMail()[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138]" started-at="2024-02-01T18:32:45 IST" name="afterClass" finished-at="2024-02-01T18:32:45 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.GiftCertificateTest.verifyTheErrorsRecipientEmailAndConfirmEmail() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyTheErrorsRecipientEmailAndConfirmEmail()[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138]" started-at="2024-02-01T18:32:45 IST" name="verifyTheErrorsRecipientEmailAndConfirmEmail" finished-at="2024-02-01T18:32:55 IST" duration-ms="10004" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTheErrorsRecipientEmailAndConfirmEmail -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138]" started-at="2024-02-01T18:32:55 IST" name="afterMethod" finished-at="2024-02-01T18:32:55 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTheErrorsRecipientEmailAndConfirmEmail status=SUCCESS method=GiftCertificateTest.verifyTheErrorsRecipientEmailAndConfirmEmail()[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyErrorsForConfirmMail()[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138]" started-at="2024-02-01T18:32:55 IST" name="verifyErrorsForConfirmMail" finished-at="2024-02-01T18:33:07 IST" duration-ms="12078" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyErrorsForConfirmMail -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138]" started-at="2024-02-01T18:32:55 IST" name="afterClass" finished-at="2024-02-01T18:32:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.GiftCertificateTest.verifyErrorsForConfirmMail() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138]" started-at="2024-02-01T18:33:07 IST" name="afterMethod" finished-at="2024-02-01T18:33:07 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyErrorsForConfirmMail status=SUCCESS method=GiftCertificateTest.verifyErrorsForConfirmMail()[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138]" started-at="2024-02-01T18:33:07 IST" name="afterClass" finished-at="2024-02-01T18:33:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.GiftCertificateTest.verifyGiftCardToCart() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyGiftCardToCart()[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138]" started-at="2024-02-01T18:33:07 IST" name="verifyGiftCardToCart" finished-at="2024-02-01T18:33:30 IST" duration-ms="22505" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGiftCardToCart -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138]" started-at="2024-02-01T18:33:30 IST" name="afterMethod" finished-at="2024-02-01T18:33:30 IST" duration-ms="17" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGiftCardToCart status=SUCCESS method=GiftCertificateTest.verifyGiftCardToCart()[pri:0, instance:testScripts.GiftCertificateTest@1cd3b138] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.GiftCertificateTest -->
      <class name="testScripts.ReviewOrderTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:23 IST" name="setUp" finished-at="2024-02-01T18:46:25 IST" duration-ms="2006" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:25 IST" name="afterClass" finished-at="2024-02-01T18:46:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.ReviewOrderTest.verifyingPlaceOrderButtonDisplayInReviewOrderPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingPlaceOrderButtonDisplayInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:25 IST" name="verifyingPlaceOrderButtonDisplayInReviewOrderPage" finished-at="2024-02-01T18:46:25 IST" duration-ms="89" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingPlaceOrderButtonDisplayInReviewOrderPage -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:25 IST" name="afterMethod" finished-at="2024-02-01T18:46:25 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingPlaceOrderButtonDisplayInReviewOrderPage status=SUCCESS method=ReviewOrderTest.verifyingPlaceOrderButtonDisplayInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingTheDisplayOfCustomerInfoInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:25 IST" name="verifyingTheDisplayOfCustomerInfoInReviewOrderPage" finished-at="2024-02-01T18:46:25 IST" duration-ms="70" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingTheDisplayOfCustomerInfoInReviewOrderPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:25 IST" name="afterClass" finished-at="2024-02-01T18:46:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ReviewOrderTest.verifyingTheDisplayOfCustomerInfoInReviewOrderPage() throws java.lang.InterruptedException,java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:25 IST" name="afterMethod" finished-at="2024-02-01T18:46:25 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingTheDisplayOfCustomerInfoInReviewOrderPage status=SUCCESS method=ReviewOrderTest.verifyingTheDisplayOfCustomerInfoInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:25 IST" name="afterClass" finished-at="2024-02-01T18:46:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ReviewOrderTest.verifyingOrderSummaryDisplayInReviewOrderPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingOrderSummaryDisplayInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:25 IST" name="verifyingOrderSummaryDisplayInReviewOrderPage" finished-at="2024-02-01T18:46:25 IST" duration-ms="62" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderSummaryDisplayInReviewOrderPage -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:25 IST" name="afterMethod" finished-at="2024-02-01T18:46:25 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingOrderSummaryDisplayInReviewOrderPage status=SUCCESS method=ReviewOrderTest.verifyingOrderSummaryDisplayInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:25 IST" name="afterClass" finished-at="2024-02-01T18:46:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ReviewOrderTest.verifyingPaymentInfoDisplayInReviewOrderPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingPaymentInfoDisplayInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:25 IST" name="verifyingPaymentInfoDisplayInReviewOrderPage" finished-at="2024-02-01T18:46:25 IST" duration-ms="55" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingPaymentInfoDisplayInReviewOrderPage -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:25 IST" name="afterMethod" finished-at="2024-02-01T18:46:25 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingPaymentInfoDisplayInReviewOrderPage status=SUCCESS method=ReviewOrderTest.verifyingPaymentInfoDisplayInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingEtgLogoDisplayInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:25 IST" name="verifyingEtgLogoDisplayInReviewOrderPage" finished-at="2024-02-01T18:46:25 IST" duration-ms="55" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingEtgLogoDisplayInReviewOrderPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:25 IST" name="afterClass" finished-at="2024-02-01T18:46:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ReviewOrderTest.verifyingEtgLogoDisplayInReviewOrderPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:25 IST" name="afterMethod" finished-at="2024-02-01T18:46:25 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingEtgLogoDisplayInReviewOrderPage status=SUCCESS method=ReviewOrderTest.verifyingEtgLogoDisplayInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:25 IST" name="afterClass" finished-at="2024-02-01T18:46:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ReviewOrderTest.verifyingTheEditPaymentToPaypalFromReviewOrderPage() throws java.lang.InterruptedException,java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingTheEditPaymentToPaypalFromReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:25 IST" name="verifyingTheEditPaymentToPaypalFromReviewOrderPage" finished-at="2024-02-01T18:46:25 IST" duration-ms="108" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingTheEditPaymentToPaypalFromReviewOrderPage -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:25 IST" name="afterMethod" finished-at="2024-02-01T18:46:25 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingTheEditPaymentToPaypalFromReviewOrderPage status=SUCCESS method=ReviewOrderTest.verifyingTheEditPaymentToPaypalFromReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingPaginationOfProductsInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:25 IST" name="verifyingPaginationOfProductsInReviewOrderPage" finished-at="2024-02-01T18:46:26 IST" duration-ms="54" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingPaginationOfProductsInReviewOrderPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:25 IST" name="afterClass" finished-at="2024-02-01T18:46:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ReviewOrderTest.verifyingPaginationOfProductsInReviewOrderPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8]" started-at="2024-02-01T18:46:26 IST" name="afterMethod" finished-at="2024-02-01T18:46:26 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingPaginationOfProductsInReviewOrderPage status=SUCCESS method=ReviewOrderTest.verifyingPaginationOfProductsInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@733aa9d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.ReviewOrderTest -->
      <class name="OrderRegression.PlaceOrderWithBuyNowPopUp">
        <test-method is-config="true" signature="setUp()[pri:0, instance:OrderRegression.PlaceOrderWithBuyNowPopUp@42b84286]" started-at="2024-02-01T18:57:36 IST" name="setUp" finished-at="2024-02-01T18:57:38 IST" duration-ms="2041" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyingPlacingOrderWithBuyNowPopUp()[pri:0, instance:OrderRegression.PlaceOrderWithBuyNowPopUp@42b84286]" started-at="2024-02-01T18:57:38 IST" name="verifyingPlacingOrderWithBuyNowPopUp" finished-at="2024-02-01T18:58:57 IST" duration-ms="78702" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingPlacingOrderWithBuyNowPopUp -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:OrderRegression.PlaceOrderWithBuyNowPopUp@42b84286]" started-at="2024-02-01T18:57:38 IST" name="afterClass" finished-at="2024-02-01T18:57:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void OrderRegression.PlaceOrderWithBuyNowPopUp.verifyingPlacingOrderWithBuyNowPopUp() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:OrderRegression.PlaceOrderWithBuyNowPopUp@42b84286]" started-at="2024-02-01T18:58:57 IST" name="afterMethod" finished-at="2024-02-01T18:58:57 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingPlacingOrderWithBuyNowPopUp status=SUCCESS method=PlaceOrderWithBuyNowPopUp.verifyingPlacingOrderWithBuyNowPopUp()[pri:0, instance:OrderRegression.PlaceOrderWithBuyNowPopUp@42b84286] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- OrderRegression.PlaceOrderWithBuyNowPopUp -->
      <class name="testScripts.FindAStoreTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.FindAStoreTest@121bb45b]" started-at="2024-02-01T18:32:00 IST" name="setUp" finished-at="2024-02-01T18:32:02 IST" duration-ms="2086" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.FindAStoreTest@121bb45b]" started-at="2024-02-01T18:32:02 IST" name="afterClass" finished-at="2024-02-01T18:32:02 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.FindAStoreTest.verifyFindAStore() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyFindAStore()[pri:0, instance:testScripts.FindAStoreTest@121bb45b]" started-at="2024-02-01T18:32:02 IST" name="verifyFindAStore" finished-at="2024-02-01T18:32:15 IST" duration-ms="13395" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyFindAStore -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.FindAStoreTest@121bb45b]" started-at="2024-02-01T18:32:15 IST" name="afterMethod" finished-at="2024-02-01T18:32:15 IST" duration-ms="35" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyFindAStore status=SUCCESS method=FindAStoreTest.verifyFindAStore()[pri:0, instance:testScripts.FindAStoreTest@121bb45b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.FindAStoreTest -->
      <class name="OrderRegression.PlaceOrderWithBuyNowButton">
        <test-method is-config="true" signature="setUp()[pri:0, instance:OrderRegression.PlaceOrderWithBuyNowButton@443effcb]" started-at="2024-02-01T18:58:57 IST" name="setUp" finished-at="2024-02-01T18:58:59 IST" duration-ms="2019" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:OrderRegression.PlaceOrderWithBuyNowButton@443effcb]" started-at="2024-02-01T18:58:59 IST" name="afterClass" finished-at="2024-02-01T18:58:59 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void OrderRegression.PlaceOrderWithBuyNowButton.verifyingPlacingOrderWithBuyNowButtonWithCreditCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingPlacingOrderWithBuyNowButtonWithCreditCard()[pri:0, instance:OrderRegression.PlaceOrderWithBuyNowButton@443effcb]" started-at="2024-02-01T18:58:59 IST" name="verifyingPlacingOrderWithBuyNowButtonWithCreditCard" finished-at="2024-02-01T19:00:12 IST" duration-ms="73547" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingPlacingOrderWithBuyNowButtonWithCreditCard -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:OrderRegression.PlaceOrderWithBuyNowButton@443effcb]" started-at="2024-02-01T19:00:12 IST" name="afterMethod" finished-at="2024-02-01T19:00:12 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingPlacingOrderWithBuyNowButtonWithCreditCard status=SUCCESS method=PlaceOrderWithBuyNowButton.verifyingPlacingOrderWithBuyNowButtonWithCreditCard()[pri:0, instance:OrderRegression.PlaceOrderWithBuyNowButton@443effcb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- OrderRegression.PlaceOrderWithBuyNowButton -->
      <class name="testScripts.ShippingPageTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:37:04 IST" name="setUp" finished-at="2024-02-01T18:37:06 IST" duration-ms="2004" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyingEditEmailInCheckoutPage2()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:37:06 IST" name="verifyingEditEmailInCheckoutPage2" finished-at="2024-02-01T18:38:12 IST" duration-ms="65241" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingEditEmailInCheckoutPage2 -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:37:06 IST" name="afterClass" finished-at="2024-02-01T18:37:06 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingEditEmailInCheckoutPage2() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:38:12 IST" name="afterMethod" finished-at="2024-02-01T18:38:12 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingEditEmailInCheckoutPage2 status=SUCCESS method=ShippingPageTest.verifyingEditEmailInCheckoutPage2()[pri:0, instance:testScripts.ShippingPageTest@a098d76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingTheCustomerInfoInCheckoutPage2()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:38:12 IST" name="verifyingTheCustomerInfoInCheckoutPage2" finished-at="2024-02-01T18:38:12 IST" duration-ms="66" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingTheCustomerInfoInCheckoutPage2 -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:38:12 IST" name="afterClass" finished-at="2024-02-01T18:38:12 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingTheCustomerInfoInCheckoutPage2() throws java.lang.InterruptedException,java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:38:12 IST" name="afterMethod" finished-at="2024-02-01T18:38:12 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingTheCustomerInfoInCheckoutPage2 status=SUCCESS method=ShippingPageTest.verifyingTheCustomerInfoInCheckoutPage2()[pri:0, instance:testScripts.ShippingPageTest@a098d76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:38:12 IST" name="afterClass" finished-at="2024-02-01T18:38:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingPaginationOfProductsInCheckOutPage2() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingPaginationOfProductsInCheckOutPage2()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:38:12 IST" name="verifyingPaginationOfProductsInCheckOutPage2" finished-at="2024-02-01T18:39:13 IST" duration-ms="61342" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingPaginationOfProductsInCheckOutPage2 -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:39:13 IST" name="afterMethod" finished-at="2024-02-01T18:39:13 IST" duration-ms="13" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingPaginationOfProductsInCheckOutPage2 status=SUCCESS method=ShippingPageTest.verifyingPaginationOfProductsInCheckOutPage2()[pri:0, instance:testScripts.ShippingPageTest@a098d76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingAllErrorsInShippingForm()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:39:13 IST" name="verifyingAllErrorsInShippingForm" finished-at="2024-02-01T18:39:18 IST" duration-ms="4692" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingAllErrorsInShippingForm -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:39:13 IST" name="afterClass" finished-at="2024-02-01T18:39:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingAllErrorsInShippingForm() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:39:18 IST" name="afterMethod" finished-at="2024-02-01T18:39:18 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingAllErrorsInShippingForm status=SUCCESS method=ShippingPageTest.verifyingAllErrorsInShippingForm()[pri:0, instance:testScripts.ShippingPageTest@a098d76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingTheErrorsInFirstName()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:39:18 IST" name="verifyingTheErrorsInFirstName" finished-at="2024-02-01T18:39:34 IST" duration-ms="15754" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingTheErrorsInFirstName -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:39:18 IST" name="afterClass" finished-at="2024-02-01T18:39:18 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingTheErrorsInFirstName() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:39:34 IST" name="afterMethod" finished-at="2024-02-01T18:39:34 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingTheErrorsInFirstName status=SUCCESS method=ShippingPageTest.verifyingTheErrorsInFirstName()[pri:0, instance:testScripts.ShippingPageTest@a098d76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:39:34 IST" name="afterClass" finished-at="2024-02-01T18:39:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingTheErrorsInLastName() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingTheErrorsInLastName()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:39:34 IST" name="verifyingTheErrorsInLastName" finished-at="2024-02-01T18:39:49 IST" duration-ms="15825" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingTheErrorsInLastName -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:39:49 IST" name="afterMethod" finished-at="2024-02-01T18:39:49 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingTheErrorsInLastName status=SUCCESS method=ShippingPageTest.verifyingTheErrorsInLastName()[pri:0, instance:testScripts.ShippingPageTest@a098d76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:39:49 IST" name="afterClass" finished-at="2024-02-01T18:39:49 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingTheAddressError() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingTheAddressError()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:39:49 IST" name="verifyingTheAddressError" finished-at="2024-02-01T18:40:04 IST" duration-ms="14637" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingTheAddressError -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:40:04 IST" name="afterMethod" finished-at="2024-02-01T18:40:04 IST" duration-ms="10" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingTheAddressError status=SUCCESS method=ShippingPageTest.verifyingTheAddressError()[pri:0, instance:testScripts.ShippingPageTest@a098d76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingphoneNumberError()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:40:04 IST" name="verifyingphoneNumberError" finished-at="2024-02-01T18:40:20 IST" duration-ms="15888" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingphoneNumberError -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:40:04 IST" name="afterClass" finished-at="2024-02-01T18:40:04 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingphoneNumberError() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:40:20 IST" name="afterMethod" finished-at="2024-02-01T18:40:20 IST" duration-ms="11" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingphoneNumberError status=SUCCESS method=ShippingPageTest.verifyingphoneNumberError()[pri:0, instance:testScripts.ShippingPageTest@a098d76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingAddNewShippingAddress()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:40:20 IST" name="verifyingAddNewShippingAddress" finished-at="2024-02-01T18:40:20 IST" duration-ms="64" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingAddNewShippingAddress -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:40:20 IST" name="afterClass" finished-at="2024-02-01T18:40:20 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingAddNewShippingAddress() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:40:20 IST" name="afterMethod" finished-at="2024-02-01T18:40:20 IST" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingAddNewShippingAddress status=SUCCESS method=ShippingPageTest.verifyingAddNewShippingAddress()[pri:0, instance:testScripts.ShippingPageTest@a098d76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingUpdateShippingAddress()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:40:20 IST" name="verifyingUpdateShippingAddress" finished-at="2024-02-01T18:40:20 IST" duration-ms="48" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingUpdateShippingAddress -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:40:20 IST" name="afterClass" finished-at="2024-02-01T18:40:20 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingUpdateShippingAddress() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:40:20 IST" name="afterMethod" finished-at="2024-02-01T18:40:20 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingUpdateShippingAddress status=SUCCESS method=ShippingPageTest.verifyingUpdateShippingAddress()[pri:0, instance:testScripts.ShippingPageTest@a098d76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingWithValidShippingAddress()[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:40:20 IST" name="verifyingWithValidShippingAddress" finished-at="2024-02-01T18:40:34 IST" duration-ms="13925" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingWithValidShippingAddress -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:40:20 IST" name="afterClass" finished-at="2024-02-01T18:40:20 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingWithValidShippingAddress() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@a098d76]" started-at="2024-02-01T18:40:34 IST" name="afterMethod" finished-at="2024-02-01T18:40:34 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingWithValidShippingAddress status=SUCCESS method=ShippingPageTest.verifyingWithValidShippingAddress()[pri:0, instance:testScripts.ShippingPageTest@a098d76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.ShippingPageTest -->
      <class name="testScripts.PaymentPageTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:40:34 IST" name="setUp" finished-at="2024-02-01T18:40:36 IST" duration-ms="2018" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:40:36 IST" name="afterClass" finished-at="2024-02-01T18:40:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingTheCustomerInfoInPaymntPage() throws java.lang.InterruptedException,java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingTheCustomerInfoInPaymntPage()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:40:36 IST" name="verifyingTheCustomerInfoInPaymntPage" finished-at="2024-02-01T18:40:38 IST" duration-ms="2130" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingTheCustomerInfoInPaymntPage -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:40:38 IST" name="afterMethod" finished-at="2024-02-01T18:40:38 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingTheCustomerInfoInPaymntPage status=SUCCESS method=PaymentPageTest.verifyingTheCustomerInfoInPaymntPage()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:40:38 IST" name="afterClass" finished-at="2024-02-01T18:40:38 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingPaginationOfProductsInPaymentPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingPaginationOfProductsInPaymentPage()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:40:38 IST" name="verifyingPaginationOfProductsInPaymentPage" finished-at="2024-02-01T18:42:01 IST" duration-ms="82486" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingPaginationOfProductsInPaymentPage -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:42:01 IST" name="afterMethod" finished-at="2024-02-01T18:42:01 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingPaginationOfProductsInPaymentPage status=SUCCESS method=PaymentPageTest.verifyingPaginationOfProductsInPaymentPage()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingOrderSummaryDisplayInPaymentPage()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:42:01 IST" name="verifyingOrderSummaryDisplayInPaymentPage" finished-at="2024-02-01T18:42:03 IST" duration-ms="2097" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderSummaryDisplayInPaymentPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:42:01 IST" name="afterClass" finished-at="2024-02-01T18:42:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingOrderSummaryDisplayInPaymentPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:42:03 IST" name="afterMethod" finished-at="2024-02-01T18:42:03 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingOrderSummaryDisplayInPaymentPage status=SUCCESS method=PaymentPageTest.verifyingOrderSummaryDisplayInPaymentPage()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingEtgLogoDisplayInPaymentPage()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:42:03 IST" name="verifyingEtgLogoDisplayInPaymentPage" finished-at="2024-02-01T18:42:05 IST" duration-ms="2065" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingEtgLogoDisplayInPaymentPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:42:03 IST" name="afterClass" finished-at="2024-02-01T18:42:03 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingEtgLogoDisplayInPaymentPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:42:05 IST" name="afterMethod" finished-at="2024-02-01T18:42:05 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingEtgLogoDisplayInPaymentPage status=SUCCESS method=PaymentPageTest.verifyingEtgLogoDisplayInPaymentPage()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:42:05 IST" name="afterClass" finished-at="2024-02-01T18:42:05 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingPaymentInfoDisplayInPaymentPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingPaymentInfoDisplayInPaymentPage()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:42:05 IST" name="verifyingPaymentInfoDisplayInPaymentPage" finished-at="2024-02-01T18:42:07 IST" duration-ms="2095" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingPaymentInfoDisplayInPaymentPage -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:42:07 IST" name="afterMethod" finished-at="2024-02-01T18:42:07 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingPaymentInfoDisplayInPaymentPage status=SUCCESS method=PaymentPageTest.verifyingPaymentInfoDisplayInPaymentPage()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingBackToCartInPaymentPage()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:42:07 IST" name="verifyingBackToCartInPaymentPage" finished-at="2024-02-01T18:42:44 IST" duration-ms="37349" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingBackToCartInPaymentPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:42:07 IST" name="afterClass" finished-at="2024-02-01T18:42:07 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingBackToCartInPaymentPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:42:44 IST" name="afterMethod" finished-at="2024-02-01T18:42:44 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingBackToCartInPaymentPage status=SUCCESS method=PaymentPageTest.verifyingBackToCartInPaymentPage()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:42:44 IST" name="afterClass" finished-at="2024-02-01T18:42:44 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.PaymentPageTest.verifyingEditShippingAddress() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingEditShippingAddress()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:42:44 IST" name="verifyingEditShippingAddress" finished-at="2024-02-01T18:43:13 IST" duration-ms="29062" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingEditShippingAddress -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:43:13 IST" name="afterMethod" finished-at="2024-02-01T18:43:13 IST" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingEditShippingAddress status=SUCCESS method=PaymentPageTest.verifyingEditShippingAddress()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingEditCustomerInfoFromCop3()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:43:13 IST" name="verifyingEditCustomerInfoFromCop3" finished-at="2024-02-01T18:43:36 IST" duration-ms="22597" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingEditCustomerInfoFromCop3 -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:43:13 IST" name="afterClass" finished-at="2024-02-01T18:43:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.PaymentPageTest.verifyingEditCustomerInfoFromCop3() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:43:36 IST" name="afterMethod" finished-at="2024-02-01T18:43:36 IST" duration-ms="11" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingEditCustomerInfoFromCop3 status=SUCCESS method=PaymentPageTest.verifyingEditCustomerInfoFromCop3()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingEditPhoneNumberInBillingAddress()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:43:36 IST" name="verifyingEditPhoneNumberInBillingAddress" finished-at="2024-02-01T18:43:53 IST" duration-ms="17406" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingEditPhoneNumberInBillingAddress -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:43:36 IST" name="afterClass" finished-at="2024-02-01T18:43:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.PaymentPageTest.verifyingEditPhoneNumberInBillingAddress() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:43:53 IST" name="afterMethod" finished-at="2024-02-01T18:43:53 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingEditPhoneNumberInBillingAddress status=SUCCESS method=PaymentPageTest.verifyingEditPhoneNumberInBillingAddress()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:43:53 IST" name="afterClass" finished-at="2024-02-01T18:43:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.PaymentPageTest.verifyingGiftMessage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingGiftMessage()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:43:53 IST" name="verifyingGiftMessage" finished-at="2024-02-01T18:44:12 IST" duration-ms="18525" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingGiftMessage -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:12 IST" name="afterMethod" finished-at="2024-02-01T18:44:12 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingGiftMessage status=SUCCESS method=PaymentPageTest.verifyingGiftMessage()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingEnterGiftCodeErrorMsg()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:12 IST" name="verifyingEnterGiftCodeErrorMsg" finished-at="2024-02-01T18:44:15 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="3183" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingEnterGiftCodeErrorMsg -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:12 IST" name="afterClass" finished-at="2024-02-01T18:44:12 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingEnterGiftCodeErrorMsg() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:15 IST" name="afterMethod" finished-at="2024-02-01T18:44:15 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingEnterGiftCodeErrorMsg status=SUCCESS method=PaymentPageTest.verifyingEnterGiftCodeErrorMsg()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingInvalidGcErrorMsg()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:15 IST" name="verifyingInvalidGcErrorMsg" finished-at="2024-02-01T18:44:22 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="6393" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingInvalidGcErrorMsg -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:15 IST" name="afterClass" finished-at="2024-02-01T18:44:15 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingInvalidGcErrorMsg() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:22 IST" name="afterMethod" finished-at="2024-02-01T18:44:22 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingInvalidGcErrorMsg status=SUCCESS method=PaymentPageTest.verifyingInvalidGcErrorMsg()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:22 IST" name="afterClass" finished-at="2024-02-01T18:44:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCheckBalanceOfValidGc() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingCheckBalanceOfValidGc()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:22 IST" name="verifyingCheckBalanceOfValidGc" finished-at="2024-02-01T18:44:29 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="7329" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCheckBalanceOfValidGc -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:29 IST" name="afterMethod" finished-at="2024-02-01T18:44:29 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCheckBalanceOfValidGc status=SUCCESS method=PaymentPageTest.verifyingCheckBalanceOfValidGc()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingCheckBalanceOfInvalidGcErrorMsg()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:29 IST" name="verifyingCheckBalanceOfInvalidGcErrorMsg" finished-at="2024-02-01T18:44:35 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="6276" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCheckBalanceOfInvalidGcErrorMsg -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:29 IST" name="afterClass" finished-at="2024-02-01T18:44:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCheckBalanceOfInvalidGcErrorMsg() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:35 IST" name="afterMethod" finished-at="2024-02-01T18:44:35 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCheckBalanceOfInvalidGcErrorMsg status=SUCCESS method=PaymentPageTest.verifyingCheckBalanceOfInvalidGcErrorMsg()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingSuccesMessageForValidGcApplied()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:35 IST" name="verifyingSuccesMessageForValidGcApplied" finished-at="2024-02-01T18:44:42 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="7318" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingSuccesMessageForValidGcApplied -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:35 IST" name="afterClass" finished-at="2024-02-01T18:44:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingSuccesMessageForValidGcApplied() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:42 IST" name="afterMethod" finished-at="2024-02-01T18:44:43 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingSuccesMessageForValidGcApplied status=SUCCESS method=PaymentPageTest.verifyingSuccesMessageForValidGcApplied()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:43 IST" name="afterClass" finished-at="2024-02-01T18:44:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingRemovalOfAppliedGc() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingRemovalOfAppliedGc()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:43 IST" name="verifyingRemovalOfAppliedGc" finished-at="2024-02-01T18:44:54 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="11452" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingRemovalOfAppliedGc -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:54 IST" name="afterMethod" finished-at="2024-02-01T18:44:54 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingRemovalOfAppliedGc status=SUCCESS method=PaymentPageTest.verifyingRemovalOfAppliedGc()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:54 IST" name="afterClass" finished-at="2024-02-01T18:44:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingAllTheErrorsInCreditCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingAllTheErrorsInCreditCard()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:44:54 IST" name="verifyingAllTheErrorsInCreditCard" finished-at="2024-02-01T18:45:01 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="7344" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingAllTheErrorsInCreditCard -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:01 IST" name="afterMethod" finished-at="2024-02-01T18:45:01 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingAllTheErrorsInCreditCard status=SUCCESS method=PaymentPageTest.verifyingAllTheErrorsInCreditCard()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingCvvAndExpErrorInCreditCard()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:01 IST" name="verifyingCvvAndExpErrorInCreditCard" finished-at="2024-02-01T18:45:15 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="13689" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCvvAndExpErrorInCreditCard -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:01 IST" name="afterClass" finished-at="2024-02-01T18:45:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCvvAndExpErrorInCreditCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:15 IST" name="afterMethod" finished-at="2024-02-01T18:45:15 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCvvAndExpErrorInCreditCard status=SUCCESS method=PaymentPageTest.verifyingCvvAndExpErrorInCreditCard()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingCvvErrorInCreditCard()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:15 IST" name="verifyingCvvErrorInCreditCard" finished-at="2024-02-01T18:45:27 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="11675" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCvvErrorInCreditCard -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:15 IST" name="afterClass" finished-at="2024-02-01T18:45:15 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCvvErrorInCreditCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:27 IST" name="afterMethod" finished-at="2024-02-01T18:45:27 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCvvErrorInCreditCard status=SUCCESS method=PaymentPageTest.verifyingCvvErrorInCreditCard()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingCreditcardNumberInValidError()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:27 IST" name="verifyingCreditcardNumberInValidError" finished-at="2024-02-01T18:45:32 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="5577" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCreditcardNumberInValidError -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:27 IST" name="afterClass" finished-at="2024-02-01T18:45:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCreditcardNumberInValidError() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:32 IST" name="afterMethod" finished-at="2024-02-01T18:45:32 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCreditcardNumberInValidError status=SUCCESS method=PaymentPageTest.verifyingCreditcardNumberInValidError()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:32 IST" name="afterClass" finished-at="2024-02-01T18:45:32 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCreditCardExpDateInValid() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingCreditCardExpDateInValid()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:32 IST" name="verifyingCreditCardExpDateInValid" finished-at="2024-02-01T18:45:40 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="7682" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCreditCardExpDateInValid -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:40 IST" name="afterMethod" finished-at="2024-02-01T18:45:40 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCreditCardExpDateInValid status=SUCCESS method=PaymentPageTest.verifyingCreditCardExpDateInValid()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingCreditCardNumberInCompleteError()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:40 IST" name="verifyingCreditCardNumberInCompleteError" finished-at="2024-02-01T18:45:50 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="9538" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCreditCardNumberInCompleteError -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:40 IST" name="afterClass" finished-at="2024-02-01T18:45:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCreditCardNumberInCompleteError() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:50 IST" name="afterMethod" finished-at="2024-02-01T18:45:50 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCreditCardNumberInCompleteError status=SUCCESS method=PaymentPageTest.verifyingCreditCardNumberInCompleteError()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingCreditCardInCompleteExpYearError()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:50 IST" name="verifyingCreditCardInCompleteExpYearError" finished-at="2024-02-01T18:45:59 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="9686" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCreditCardInCompleteExpYearError -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:50 IST" name="afterClass" finished-at="2024-02-01T18:45:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCreditCardInCompleteExpYearError() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:59 IST" name="afterMethod" finished-at="2024-02-01T18:45:59 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCreditCardInCompleteExpYearError status=SUCCESS method=PaymentPageTest.verifyingCreditCardInCompleteExpYearError()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingCreditCardInCompleteCvvError()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:59 IST" name="verifyingCreditCardInCompleteCvvError" finished-at="2024-02-01T18:46:09 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="9639" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCreditCardInCompleteCvvError -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:45:59 IST" name="afterClass" finished-at="2024-02-01T18:45:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCreditCardInCompleteCvvError() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:46:09 IST" name="afterMethod" finished-at="2024-02-01T18:46:09 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCreditCardInCompleteCvvError status=SUCCESS method=PaymentPageTest.verifyingCreditCardInCompleteCvvError()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingAddnewCreditCard()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:46:09 IST" name="verifyingAddnewCreditCard" finished-at="2024-02-01T18:46:11 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="2095" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingAddnewCreditCard -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:46:09 IST" name="afterClass" finished-at="2024-02-01T18:46:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingAddnewCreditCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:46:11 IST" name="afterMethod" finished-at="2024-02-01T18:46:11 IST" duration-ms="10" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingAddnewCreditCard status=SUCCESS method=PaymentPageTest.verifyingAddnewCreditCard()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:46:11 IST" name="afterClass" finished-at="2024-02-01T18:46:11 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCreditcardWithValidDetails() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingCreditcardWithValidDetails()[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:46:11 IST" name="verifyingCreditcardWithValidDetails" finished-at="2024-02-01T18:46:23 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="12001" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCreditcardWithValidDetails -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@40e37b06]" started-at="2024-02-01T18:46:23 IST" name="afterMethod" finished-at="2024-02-01T18:46:23 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCreditcardWithValidDetails status=SUCCESS method=PaymentPageTest.verifyingCreditcardWithValidDetails()[pri:0, instance:testScripts.PaymentPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.PaymentPageTest -->
      <class name="testScripts.LogOutTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.LogOutTest@b52b755]" started-at="2024-02-01T18:36:52 IST" name="setUp" finished-at="2024-02-01T18:36:54 IST" duration-ms="2016" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyLogout()[pri:0, instance:testScripts.LogOutTest@b52b755]" started-at="2024-02-01T18:36:54 IST" name="verifyLogout" finished-at="2024-02-01T18:37:04 IST" duration-ms="10201" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLogout -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.LogOutTest@b52b755]" started-at="2024-02-01T18:36:54 IST" name="afterClass" finished-at="2024-02-01T18:36:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.LogOutTest.verifyLogout() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.LogOutTest@b52b755]" started-at="2024-02-01T18:37:04 IST" name="afterMethod" finished-at="2024-02-01T18:37:04 IST" duration-ms="11" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyLogout status=SUCCESS method=LogOutTest.verifyLogout()[pri:0, instance:testScripts.LogOutTest@b52b755] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.LogOutTest -->
      <class name="testScripts.CreateAccountPageTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2]" started-at="2024-02-01T18:34:38 IST" name="setUp" finished-at="2024-02-01T18:34:40 IST" duration-ms="2021" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2]" started-at="2024-02-01T18:34:40 IST" name="afterClass" finished-at="2024-02-01T18:34:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.CreateAccountPageTest.verifyEmailAndConfirmEmail() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyEmailAndConfirmEmail()[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2]" started-at="2024-02-01T18:34:40 IST" name="verifyEmailAndConfirmEmail" finished-at="2024-02-01T18:35:25 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="45032" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEmailAndConfirmEmail -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2]" started-at="2024-02-01T18:35:25 IST" name="afterMethod" finished-at="2024-02-01T18:35:25 IST" duration-ms="24" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEmailAndConfirmEmail status=SUCCESS method=CreateAccountPageTest.verifyEmailAndConfirmEmail()[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyPasswordMismatch()[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2]" started-at="2024-02-01T18:35:25 IST" name="verifyPasswordMismatch" finished-at="2024-02-01T18:35:46 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="21061" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPasswordMismatch -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2]" started-at="2024-02-01T18:35:25 IST" name="afterClass" finished-at="2024-02-01T18:35:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.CreateAccountPageTest.verifyPasswordMismatch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2]" started-at="2024-02-01T18:35:46 IST" name="afterMethod" finished-at="2024-02-01T18:35:46 IST" duration-ms="11" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPasswordMismatch status=SUCCESS method=CreateAccountPageTest.verifyPasswordMismatch()[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyPhoneNumError()[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2]" started-at="2024-02-01T18:35:46 IST" name="verifyPhoneNumError" finished-at="2024-02-01T18:36:07 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="21016" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPhoneNumError -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2]" started-at="2024-02-01T18:35:46 IST" name="afterClass" finished-at="2024-02-01T18:35:46 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.CreateAccountPageTest.verifyPhoneNumError() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2]" started-at="2024-02-01T18:36:07 IST" name="afterMethod" finished-at="2024-02-01T18:36:07 IST" duration-ms="20" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPhoneNumError status=SUCCESS method=CreateAccountPageTest.verifyPhoneNumError()[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2]" started-at="2024-02-01T18:36:07 IST" name="afterClass" finished-at="2024-02-01T18:36:07 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.CreateAccountPageTest.verifyEmailformatError() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyEmailformatError()[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2]" started-at="2024-02-01T18:36:07 IST" name="verifyEmailformatError" finished-at="2024-02-01T18:36:29 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="21091" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEmailformatError -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2]" started-at="2024-02-01T18:36:29 IST" name="afterMethod" finished-at="2024-02-01T18:36:29 IST" duration-ms="11" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEmailformatError status=SUCCESS method=CreateAccountPageTest.verifyEmailformatError()[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2]" started-at="2024-02-01T18:36:29 IST" name="afterClass" finished-at="2024-02-01T18:36:29 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.CreateAccountPageTest.verifyCreateAccountWithValidCredentials() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyCreateAccountWithValidCredentials()[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2]" started-at="2024-02-01T18:36:29 IST" name="verifyCreateAccountWithValidCredentials" finished-at="2024-02-01T18:36:52 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="23682" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateAccountWithValidCredentials -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2]" started-at="2024-02-01T18:36:52 IST" name="afterMethod" finished-at="2024-02-01T18:36:52 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateAccountWithValidCredentials status=SUCCESS method=CreateAccountPageTest.verifyCreateAccountWithValidCredentials()[pri:0, instance:testScripts.CreateAccountPageTest@5a6d30e2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.CreateAccountPageTest -->
      <class name="testScripts.LoginPageTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.LoginPageTest@151bf776]" started-at="2024-02-01T18:33:30 IST" name="setUp" finished-at="2024-02-01T18:33:32 IST" duration-ms="2012" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="VerifyingLoginFailureWithIncorrectCredentials()[pri:0, instance:testScripts.LoginPageTest@151bf776]" started-at="2024-02-01T18:33:32 IST" name="VerifyingLoginFailureWithIncorrectCredentials" finished-at="2024-02-01T18:33:51 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="19429" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyingLoginFailureWithIncorrectCredentials -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.LoginPageTest@151bf776]" started-at="2024-02-01T18:33:32 IST" name="afterClass" finished-at="2024-02-01T18:33:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.LoginPageTest.VerifyingLoginFailureWithIncorrectCredentials() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.LoginPageTest@151bf776]" started-at="2024-02-01T18:33:51 IST" name="afterMethod" finished-at="2024-02-01T18:33:51 IST" duration-ms="20" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyingLoginFailureWithIncorrectCredentials status=SUCCESS method=LoginPageTest.VerifyingLoginFailureWithIncorrectCredentials()[pri:0, instance:testScripts.LoginPageTest@151bf776] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="VerifyingLoginFailureWithEmptyEmailAndPassword()[pri:0, instance:testScripts.LoginPageTest@151bf776]" started-at="2024-02-01T18:33:51 IST" name="VerifyingLoginFailureWithEmptyEmailAndPassword" finished-at="2024-02-01T18:33:56 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="5241" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyingLoginFailureWithEmptyEmailAndPassword -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.LoginPageTest@151bf776]" started-at="2024-02-01T18:33:51 IST" name="afterClass" finished-at="2024-02-01T18:33:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.LoginPageTest.VerifyingLoginFailureWithEmptyEmailAndPassword() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.LoginPageTest@151bf776]" started-at="2024-02-01T18:33:56 IST" name="afterMethod" finished-at="2024-02-01T18:33:56 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyingLoginFailureWithEmptyEmailAndPassword status=SUCCESS method=LoginPageTest.VerifyingLoginFailureWithEmptyEmailAndPassword()[pri:0, instance:testScripts.LoginPageTest@151bf776] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="VerifyingLoginFailureWithInvalidEmailFormat()[pri:0, instance:testScripts.LoginPageTest@151bf776]" started-at="2024-02-01T18:33:56 IST" name="VerifyingLoginFailureWithInvalidEmailFormat" finished-at="2024-02-01T18:34:06 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="9436" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyingLoginFailureWithInvalidEmailFormat -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.LoginPageTest@151bf776]" started-at="2024-02-01T18:33:56 IST" name="afterClass" finished-at="2024-02-01T18:33:56 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.LoginPageTest.VerifyingLoginFailureWithInvalidEmailFormat() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.LoginPageTest@151bf776]" started-at="2024-02-01T18:34:06 IST" name="afterMethod" finished-at="2024-02-01T18:34:06 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyingLoginFailureWithInvalidEmailFormat status=SUCCESS method=LoginPageTest.VerifyingLoginFailureWithInvalidEmailFormat()[pri:0, instance:testScripts.LoginPageTest@151bf776] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.LoginPageTest@151bf776]" started-at="2024-02-01T18:34:06 IST" name="afterClass" finished-at="2024-02-01T18:34:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.LoginPageTest.VerifyingLoginFailureWithEmptyEmail() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="VerifyingLoginFailureWithEmptyEmail()[pri:0, instance:testScripts.LoginPageTest@151bf776]" started-at="2024-02-01T18:34:06 IST" name="VerifyingLoginFailureWithEmptyEmail" finished-at="2024-02-01T18:34:15 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="9364" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyingLoginFailureWithEmptyEmail -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.LoginPageTest@151bf776]" started-at="2024-02-01T18:34:15 IST" name="afterMethod" finished-at="2024-02-01T18:34:15 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyingLoginFailureWithEmptyEmail status=SUCCESS method=LoginPageTest.VerifyingLoginFailureWithEmptyEmail()[pri:0, instance:testScripts.LoginPageTest@151bf776] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.LoginPageTest@151bf776]" started-at="2024-02-01T18:34:15 IST" name="afterClass" finished-at="2024-02-01T18:34:15 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.LoginPageTest.VerifyingLoginFailureWithEmptyPassword() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="VerifyingLoginFailureWithEmptyPassword()[pri:0, instance:testScripts.LoginPageTest@151bf776]" started-at="2024-02-01T18:34:15 IST" name="VerifyingLoginFailureWithEmptyPassword" finished-at="2024-02-01T18:34:24 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="9371" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyingLoginFailureWithEmptyPassword -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.LoginPageTest@151bf776]" started-at="2024-02-01T18:34:24 IST" name="afterMethod" finished-at="2024-02-01T18:34:24 IST" duration-ms="13" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyingLoginFailureWithEmptyPassword status=SUCCESS method=LoginPageTest.VerifyingLoginFailureWithEmptyPassword()[pri:0, instance:testScripts.LoginPageTest@151bf776] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="VerifyingLoginWithValidCredentials()[pri:0, instance:testScripts.LoginPageTest@151bf776]" started-at="2024-02-01T18:34:24 IST" name="VerifyingLoginWithValidCredentials" finished-at="2024-02-01T18:34:38 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="13737" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyingLoginWithValidCredentials -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.LoginPageTest@151bf776]" started-at="2024-02-01T18:34:24 IST" name="afterClass" finished-at="2024-02-01T18:34:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.LoginPageTest.VerifyingLoginWithValidCredentials() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.LoginPageTest@151bf776]" started-at="2024-02-01T18:34:38 IST" name="afterMethod" finished-at="2024-02-01T18:34:38 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyingLoginWithValidCredentials status=SUCCESS method=LoginPageTest.VerifyingLoginWithValidCredentials()[pri:0, instance:testScripts.LoginPageTest@151bf776] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.LoginPageTest -->
      <class name="testScripts.FooterPageTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.FooterPageTest@4faa298]" started-at="2024-02-01T18:32:15 IST" name="setUp" finished-at="2024-02-01T18:32:17 IST" duration-ms="2019" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.FooterPageTest@4faa298]" started-at="2024-02-01T18:32:17 IST" name="afterClass" finished-at="2024-02-01T18:32:17 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.FooterPageTest.verifyingResourceFooterLinks() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingResourceFooterLinks()[pri:0, instance:testScripts.FooterPageTest@4faa298]" started-at="2024-02-01T18:32:17 IST" name="verifyingResourceFooterLinks" finished-at="2024-02-01T18:32:23 IST" duration-ms="5419" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingResourceFooterLinks -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.FooterPageTest@4faa298]" started-at="2024-02-01T18:32:23 IST" name="afterMethod" finished-at="2024-02-01T18:32:23 IST" duration-ms="20" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingResourceFooterLinks status=SUCCESS method=FooterPageTest.verifyingResourceFooterLinks()[pri:0, instance:testScripts.FooterPageTest@4faa298] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.FooterPageTest@4faa298]" started-at="2024-02-01T18:32:23 IST" name="afterClass" finished-at="2024-02-01T18:32:23 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.FooterPageTest.verifyinginvalidEmailInEmailSignUpBox() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyinginvalidEmailInEmailSignUpBox()[pri:0, instance:testScripts.FooterPageTest@4faa298]" started-at="2024-02-01T18:32:23 IST" name="verifyinginvalidEmailInEmailSignUpBox" finished-at="2024-02-01T18:32:26 IST" duration-ms="3371" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyinginvalidEmailInEmailSignUpBox -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.FooterPageTest@4faa298]" started-at="2024-02-01T18:32:26 IST" name="afterMethod" finished-at="2024-02-01T18:32:26 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyinginvalidEmailInEmailSignUpBox status=SUCCESS method=FooterPageTest.verifyinginvalidEmailInEmailSignUpBox()[pri:0, instance:testScripts.FooterPageTest@4faa298] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.FooterPageTest -->
      <class name="testScripts.OrderPlacingWithAllPaymentsTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:46:26 IST" name="setUp" finished-at="2024-02-01T18:46:28 IST" duration-ms="2012" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:46:28 IST" name="afterClass" finished-at="2024-02-01T18:46:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCreditCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingOrderIsPlacingWithCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:46:28 IST" name="verifyingOrderIsPlacingWithCreditCard" finished-at="2024-02-01T18:46:59 IST" duration-ms="31296" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderIsPlacingWithCreditCard -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:46:59 IST" name="afterMethod" finished-at="2024-02-01T18:46:59 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingOrderIsPlacingWithCreditCard status=SUCCESS method=OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingOrderIsPlacingWithPaypalFromCheckoutPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:46:59 IST" name="verifyingOrderIsPlacingWithPaypalFromCheckoutPage" finished-at="2024-02-01T18:49:08 IST" duration-ms="129248" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderIsPlacingWithPaypalFromCheckoutPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:46:59 IST" name="afterClass" finished-at="2024-02-01T18:46:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalFromCheckoutPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:49:08 IST" name="afterMethod" finished-at="2024-02-01T18:49:08 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingOrderIsPlacingWithPaypalFromCheckoutPage status=SUCCESS method=OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalFromCheckoutPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:49:08 IST" name="afterClass" finished-at="2024-02-01T18:49:08 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithGiftCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingOrderIsPlacingWithGiftCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:49:08 IST" name="verifyingOrderIsPlacingWithGiftCard" finished-at="2024-02-01T18:51:02 IST" duration-ms="114290" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderIsPlacingWithGiftCard -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:51:02 IST" name="afterMethod" finished-at="2024-02-01T18:51:02 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingOrderIsPlacingWithGiftCard status=SUCCESS method=OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithGiftCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingOrderIsPlacingWithCombinationOfGcAndCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:51:02 IST" name="verifyingOrderIsPlacingWithCombinationOfGcAndCreditCard" finished-at="2024-02-01T18:52:44 IST" duration-ms="101891" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderIsPlacingWithCombinationOfGcAndCreditCard -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:51:02 IST" name="afterClass" finished-at="2024-02-01T18:51:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCombinationOfGcAndCreditCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:52:44 IST" name="afterMethod" finished-at="2024-02-01T18:52:44 IST" duration-ms="10" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingOrderIsPlacingWithCombinationOfGcAndCreditCard status=SUCCESS method=OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCombinationOfGcAndCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingOrderIsPlacingWithCombinationOfGcAndPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:52:44 IST" name="verifyingOrderIsPlacingWithCombinationOfGcAndPaypal" finished-at="2024-02-01T18:54:44 IST" duration-ms="120123" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderIsPlacingWithCombinationOfGcAndPaypal -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:52:44 IST" name="afterClass" finished-at="2024-02-01T18:52:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCombinationOfGcAndPaypal() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:54:44 IST" name="afterMethod" finished-at="2024-02-01T18:54:44 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingOrderIsPlacingWithCombinationOfGcAndPaypal status=SUCCESS method=OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCombinationOfGcAndPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:54:44 IST" name="afterClass" finished-at="2024-02-01T18:54:44 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:54:44 IST" name="verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage" finished-at="2024-02-01T18:55:03 IST" duration-ms="18739" status="FAIL">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[bound must be positive]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: bound must be positive
at java.base/java.util.Random.nextInt(Random.java:322)
at functionality.attributesSelection.sizeSelction(attributesSelection.java:29)
at functionality.allAttributesSelection.quickshopallAttributes(allAttributesSelection.java:201)
at functionality.allAttributesSelection.selectTheAttributesInPdpPage(allAttributesSelection.java:130)
at Payments.PdpPagePaypalBuyNow.pdpPagePaypal(PdpPagePaypalBuyNow.java:29)
at tasks.PlaceOrderWithDifferentPayments.orderPlacingWithPaypalInPdpPage(PlaceOrderWithDifferentPayments.java:152)
at testScripts.OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage(OrderPlacingWithAllPaymentsTest.java:47)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:55:03 IST" name="afterMethod" finished-at="2024-02-01T18:55:04 IST" duration-ms="632" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage status=FAILURE method=OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingOrderIsPlacingWithCartPagePaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:55:04 IST" name="verifyingOrderIsPlacingWithCartPagePaypal" finished-at="2024-02-01T18:56:22 IST" duration-ms="78272" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderIsPlacingWithCartPagePaypal -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:55:04 IST" name="afterClass" finished-at="2024-02-01T18:55:04 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCartPagePaypal() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:56:22 IST" name="afterMethod" finished-at="2024-02-01T18:56:22 IST" duration-ms="22" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingOrderIsPlacingWithCartPagePaypal status=SUCCESS method=OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCartPagePaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:56:22 IST" name="afterClass" finished-at="2024-02-01T18:56:22 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithMiniCartPaypal() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingOrderIsPlacingWithMiniCartPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:56:22 IST" name="verifyingOrderIsPlacingWithMiniCartPaypal" finished-at="2024-02-01T18:57:36 IST" duration-ms="73838" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderIsPlacingWithMiniCartPaypal -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5]" started-at="2024-02-01T18:57:36 IST" name="afterMethod" finished-at="2024-02-01T18:57:36 IST" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingOrderIsPlacingWithMiniCartPaypal status=SUCCESS method=OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithMiniCartPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@6dcc40f5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.OrderPlacingWithAllPaymentsTest -->
    </test> <!-- SmokeTest -->
  </suite> <!-- Providio Regression Test -->
</testng-results>
