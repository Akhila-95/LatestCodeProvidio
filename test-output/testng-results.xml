<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="33" total="113" passed="70" failed="2" skipped="8">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-02-06T20:04:55 IST" name="Providio Regression Test" finished-at="2024-02-06T20:34:41 IST" duration-ms="1785944">
    <groups>
      <group name="regression">
        <method signature="launchBrowsering.verifyHomePageLaunching()[pri:0, instance:browser.launchBrowsering@726aa968]" name="verifyHomePageLaunching" class="browser.launchBrowsering"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCartPagePaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" name="verifyingOrderIsPlacingWithCartPagePaypal" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCombinationOfGcAndCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" name="verifyingOrderIsPlacingWithCombinationOfGcAndCreditCard" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCombinationOfGcAndPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" name="verifyingOrderIsPlacingWithCombinationOfGcAndPaypal" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" name="verifyingOrderIsPlacingWithCreditCard" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithGiftCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" name="verifyingOrderIsPlacingWithGiftCard" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithMiniCartPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" name="verifyingOrderIsPlacingWithMiniCartPaypal" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" name="verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalFromCheckoutPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" name="verifyingOrderIsPlacingWithPaypalFromCheckoutPage" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="ShippingPageTest.verifyingAddNewShippingAddressAndPlaceOrder()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" name="verifyingAddNewShippingAddressAndPlaceOrder" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingAllErrorsInShippingForm()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" name="verifyingAllErrorsInShippingForm" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingTheAddressError()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" name="verifyingTheAddressError" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingTheErrorsInFirstName()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" name="verifyingTheErrorsInFirstName" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingTheErrorsInLastName()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" name="verifyingTheErrorsInLastName" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingUpdateShippingAddressAndPlaceOrder()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" name="verifyingUpdateShippingAddressAndPlaceOrder" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingWithValidShippingAddress()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" name="verifyingWithValidShippingAddress" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingphoneNumberError()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" name="verifyingphoneNumberError" class="testScripts.ShippingPageTest"/>
      </group> <!-- regression -->
      <group name="smoke">
        <method signature="launchBrowsering.verifyHomePageLaunching()[pri:0, instance:browser.launchBrowsering@726aa968]" name="verifyHomePageLaunching" class="browser.launchBrowsering"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCartPagePaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" name="verifyingOrderIsPlacingWithCartPagePaypal" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCombinationOfGcAndCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" name="verifyingOrderIsPlacingWithCombinationOfGcAndCreditCard" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCombinationOfGcAndPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" name="verifyingOrderIsPlacingWithCombinationOfGcAndPaypal" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" name="verifyingOrderIsPlacingWithCreditCard" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithGiftCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" name="verifyingOrderIsPlacingWithGiftCard" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithMiniCartPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" name="verifyingOrderIsPlacingWithMiniCartPaypal" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" name="verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalFromCheckoutPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" name="verifyingOrderIsPlacingWithPaypalFromCheckoutPage" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="ShippingPageTest.verifyingAddNewShippingAddressAndPlaceOrder()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" name="verifyingAddNewShippingAddressAndPlaceOrder" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingAllErrorsInShippingForm()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" name="verifyingAllErrorsInShippingForm" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingTheAddressError()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" name="verifyingTheAddressError" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingTheErrorsInFirstName()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" name="verifyingTheErrorsInFirstName" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingTheErrorsInLastName()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" name="verifyingTheErrorsInLastName" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingUpdateShippingAddressAndPlaceOrder()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" name="verifyingUpdateShippingAddressAndPlaceOrder" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingWithValidShippingAddress()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" name="verifyingWithValidShippingAddress" class="testScripts.ShippingPageTest"/>
        <method signature="ShippingPageTest.verifyingphoneNumberError()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" name="verifyingphoneNumberError" class="testScripts.ShippingPageTest"/>
      </group> <!-- smoke -->
    </groups>
    <test started-at="2024-02-06T20:04:55 IST" name="Regression Testing" finished-at="2024-02-06T20:34:41 IST" duration-ms="1785944">
      <class name="browser.launchBrowsering">
        <test-method is-config="true" signature="setUpforReport()[pri:0, instance:browser.launchBrowsering@726aa968]" started-at="2024-02-06T20:04:50 IST" name="setUpforReport" finished-at="2024-02-06T20:04:55 IST" duration-ms="5501" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpforReport -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:browser.launchBrowsering@726aa968]" started-at="2024-02-06T20:04:55 IST" name="setUp" finished-at="2024-02-06T20:04:57 IST" duration-ms="2045" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:browser.launchBrowsering@726aa968]" started-at="2024-02-06T20:04:57 IST" name="afterClass" finished-at="2024-02-06T20:04:57 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void browser.launchBrowsering.verifyHomePageLaunching() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyHomePageLaunching()[pri:0, instance:browser.launchBrowsering@726aa968]" started-at="2024-02-06T20:04:57 IST" name="verifyHomePageLaunching" finished-at="2024-02-06T20:05:05 IST" duration-ms="7476" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyHomePageLaunching -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:browser.launchBrowsering@726aa968]" started-at="2024-02-06T20:05:05 IST" name="afterMethod" finished-at="2024-02-06T20:05:05 IST" duration-ms="73" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyHomePageLaunching status=SUCCESS method=launchBrowsering.verifyHomePageLaunching()[pri:0, instance:browser.launchBrowsering@726aa968] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:browser.launchBrowsering@726aa968]" started-at="2024-02-06T20:34:41 IST" name="tearDown" finished-at="2024-02-06T20:34:43 IST" duration-ms="1880" status="FAIL">
          <exception class="org.openqa.selenium.WebDriverException">
            <message>
              <![CDATA[unknown error: failed to change window state to 'normal', current state is 'maximized'
  (Session info: chrome=121.0.6167.140)
Build info: version: '4.16.1', revision: '9b4c83354e'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [4b0bac046bfaa81710643379bc08bb9b, maximizeCurrentWindow {}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 121.0.6167.140, chrome: {chromedriverVersion: 121.0.6167.85 (3f98d690ad7e..., userDataDir: C:\Users\user\AppData\Local...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:56069}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:56069/devtoo..., se:cdpVersion: 121.0.6167.140, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 4b0bac046bfaa81710643379bc08bb9b]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.WebDriverException: unknown error: failed to change window state to 'normal', current state is 'maximized'
  (Session info: chrome=121.0.6167.140)
Build info: version: '4.16.1', revision: '9b4c83354e'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [4b0bac046bfaa81710643379bc08bb9b, maximizeCurrentWindow {}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 121.0.6167.140, chrome: {chromedriverVersion: 121.0.6167.85 (3f98d690ad7e..., userDataDir: C:\Users\user\AppData\Local...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:56069}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:56069/devtoo..., se:cdpVersion: 121.0.6167.140, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 4b0bac046bfaa81710643379bc08bb9b
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:200)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:175)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:523)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:596)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:600)
at org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.maximize(RemoteWebDriver.java:1039)
at com.providio.testcases.baseClass.tearDown(baseClass.java:310)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:69)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:361)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:296)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:404)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.WebDriverException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- browser.launchBrowsering -->
      <class name="testScripts.GiftCertificateTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.GiftCertificateTest@a098d76]" started-at="2024-02-06T20:05:31 IST" name="setUp" finished-at="2024-02-06T20:05:33 IST" duration-ms="2008" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyErrorMsgsInGiftCard()[pri:0, instance:testScripts.GiftCertificateTest@a098d76]" started-at="2024-02-06T20:05:33 IST" name="verifyErrorMsgsInGiftCard" finished-at="2024-02-06T20:05:40 IST" duration-ms="6636" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyErrorMsgsInGiftCard -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.GiftCertificateTest@a098d76]" started-at="2024-02-06T20:05:33 IST" name="afterClass" finished-at="2024-02-06T20:05:33 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.GiftCertificateTest.verifyErrorMsgsInGiftCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.GiftCertificateTest@a098d76]" started-at="2024-02-06T20:05:40 IST" name="afterMethod" finished-at="2024-02-06T20:05:40 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyErrorMsgsInGiftCard status=SUCCESS method=GiftCertificateTest.verifyErrorMsgsInGiftCard()[pri:0, instance:testScripts.GiftCertificateTest@a098d76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.GiftCertificateTest@a098d76]" started-at="2024-02-06T20:05:40 IST" name="afterClass" finished-at="2024-02-06T20:05:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.GiftCertificateTest.verifytheErrorsFromName_Recipients_confirmRecipientEMail() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifytheErrorsFromName_Recipients_confirmRecipientEMail()[pri:0, instance:testScripts.GiftCertificateTest@a098d76]" started-at="2024-02-06T20:05:40 IST" name="verifytheErrorsFromName_Recipients_confirmRecipientEMail" finished-at="2024-02-06T20:05:49 IST" duration-ms="9320" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifytheErrorsFromName_Recipients_confirmRecipientEMail -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.GiftCertificateTest@a098d76]" started-at="2024-02-06T20:05:49 IST" name="afterMethod" finished-at="2024-02-06T20:05:49 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifytheErrorsFromName_Recipients_confirmRecipientEMail status=SUCCESS method=GiftCertificateTest.verifytheErrorsFromName_Recipients_confirmRecipientEMail()[pri:0, instance:testScripts.GiftCertificateTest@a098d76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyTheErrorsRecipientEmailAndConfirmEmail()[pri:0, instance:testScripts.GiftCertificateTest@a098d76]" started-at="2024-02-06T20:05:49 IST" name="verifyTheErrorsRecipientEmailAndConfirmEmail" finished-at="2024-02-06T20:05:59 IST" duration-ms="10227" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTheErrorsRecipientEmailAndConfirmEmail -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.GiftCertificateTest@a098d76]" started-at="2024-02-06T20:05:49 IST" name="afterClass" finished-at="2024-02-06T20:05:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.GiftCertificateTest.verifyTheErrorsRecipientEmailAndConfirmEmail() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.GiftCertificateTest@a098d76]" started-at="2024-02-06T20:05:59 IST" name="afterMethod" finished-at="2024-02-06T20:05:59 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTheErrorsRecipientEmailAndConfirmEmail status=SUCCESS method=GiftCertificateTest.verifyTheErrorsRecipientEmailAndConfirmEmail()[pri:0, instance:testScripts.GiftCertificateTest@a098d76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.GiftCertificateTest@a098d76]" started-at="2024-02-06T20:05:59 IST" name="afterClass" finished-at="2024-02-06T20:05:59 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.GiftCertificateTest.verifyErrorsForConfirmMail() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyErrorsForConfirmMail()[pri:0, instance:testScripts.GiftCertificateTest@a098d76]" started-at="2024-02-06T20:05:59 IST" name="verifyErrorsForConfirmMail" finished-at="2024-02-06T20:06:12 IST" duration-ms="12699" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyErrorsForConfirmMail -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.GiftCertificateTest@a098d76]" started-at="2024-02-06T20:06:12 IST" name="afterMethod" finished-at="2024-02-06T20:06:12 IST" duration-ms="14" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyErrorsForConfirmMail status=SUCCESS method=GiftCertificateTest.verifyErrorsForConfirmMail()[pri:0, instance:testScripts.GiftCertificateTest@a098d76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyGiftCardToCart()[pri:0, instance:testScripts.GiftCertificateTest@a098d76]" started-at="2024-02-06T20:06:12 IST" name="verifyGiftCardToCart" finished-at="2024-02-06T20:06:33 IST" duration-ms="21316" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGiftCardToCart -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.GiftCertificateTest@a098d76]" started-at="2024-02-06T20:06:12 IST" name="afterClass" finished-at="2024-02-06T20:06:12 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.GiftCertificateTest.verifyGiftCardToCart() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.GiftCertificateTest@a098d76]" started-at="2024-02-06T20:06:33 IST" name="afterMethod" finished-at="2024-02-06T20:06:33 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGiftCardToCart status=SUCCESS method=GiftCertificateTest.verifyGiftCardToCart()[pri:0, instance:testScripts.GiftCertificateTest@a098d76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.GiftCertificateTest -->
      <class name="testScripts.ReviewOrderTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:27:48 IST" name="setUp" finished-at="2024-02-06T20:27:50 IST" duration-ms="2019" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyingPlaceOrderButtonDisplayInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:27:50 IST" name="verifyingPlaceOrderButtonDisplayInReviewOrderPage" finished-at="2024-02-06T20:27:50 IST" duration-ms="121" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingPlaceOrderButtonDisplayInReviewOrderPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:27:50 IST" name="afterClass" finished-at="2024-02-06T20:27:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.ReviewOrderTest.verifyingPlaceOrderButtonDisplayInReviewOrderPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:27:50 IST" name="afterMethod" finished-at="2024-02-06T20:27:50 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingPlaceOrderButtonDisplayInReviewOrderPage status=SUCCESS method=ReviewOrderTest.verifyingPlaceOrderButtonDisplayInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@56da7487] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingTheDisplayOfCustomerInfoInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:27:50 IST" name="verifyingTheDisplayOfCustomerInfoInReviewOrderPage" finished-at="2024-02-06T20:27:51 IST" duration-ms="89" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingTheDisplayOfCustomerInfoInReviewOrderPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:27:50 IST" name="afterClass" finished-at="2024-02-06T20:27:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ReviewOrderTest.verifyingTheDisplayOfCustomerInfoInReviewOrderPage() throws java.lang.InterruptedException,java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:27:51 IST" name="afterMethod" finished-at="2024-02-06T20:27:51 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingTheDisplayOfCustomerInfoInReviewOrderPage status=SUCCESS method=ReviewOrderTest.verifyingTheDisplayOfCustomerInfoInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@56da7487] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingPaginationOfProductsInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:27:51 IST" name="verifyingPaginationOfProductsInReviewOrderPage" finished-at="2024-02-06T20:29:32 IST" duration-ms="101696" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingPaginationOfProductsInReviewOrderPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:27:51 IST" name="afterClass" finished-at="2024-02-06T20:27:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ReviewOrderTest.verifyingPaginationOfProductsInReviewOrderPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:29:32 IST" name="afterMethod" finished-at="2024-02-06T20:29:32 IST" duration-ms="10" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingPaginationOfProductsInReviewOrderPage status=SUCCESS method=ReviewOrderTest.verifyingPaginationOfProductsInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@56da7487] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:29:32 IST" name="afterClass" finished-at="2024-02-06T20:29:32 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ReviewOrderTest.verifyingOrderSummaryDisplayInReviewOrderPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingOrderSummaryDisplayInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:29:32 IST" name="verifyingOrderSummaryDisplayInReviewOrderPage" finished-at="2024-02-06T20:29:32 IST" duration-ms="107" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderSummaryDisplayInReviewOrderPage -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:29:32 IST" name="afterMethod" finished-at="2024-02-06T20:29:32 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingOrderSummaryDisplayInReviewOrderPage status=SUCCESS method=ReviewOrderTest.verifyingOrderSummaryDisplayInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@56da7487] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingPaymentInfoDisplayInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:29:32 IST" name="verifyingPaymentInfoDisplayInReviewOrderPage" finished-at="2024-02-06T20:29:32 IST" duration-ms="75" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingPaymentInfoDisplayInReviewOrderPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:29:32 IST" name="afterClass" finished-at="2024-02-06T20:29:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ReviewOrderTest.verifyingPaymentInfoDisplayInReviewOrderPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:29:32 IST" name="afterMethod" finished-at="2024-02-06T20:29:32 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingPaymentInfoDisplayInReviewOrderPage status=SUCCESS method=ReviewOrderTest.verifyingPaymentInfoDisplayInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@56da7487] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingEtgLogoDisplayInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:29:32 IST" name="verifyingEtgLogoDisplayInReviewOrderPage" finished-at="2024-02-06T20:29:33 IST" duration-ms="79" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingEtgLogoDisplayInReviewOrderPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:29:32 IST" name="afterClass" finished-at="2024-02-06T20:29:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ReviewOrderTest.verifyingEtgLogoDisplayInReviewOrderPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:29:33 IST" name="afterMethod" finished-at="2024-02-06T20:29:33 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingEtgLogoDisplayInReviewOrderPage status=SUCCESS method=ReviewOrderTest.verifyingEtgLogoDisplayInReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@56da7487] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingTheEditPaymentToPaypalFromReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:29:33 IST" name="verifyingTheEditPaymentToPaypalFromReviewOrderPage" finished-at="2024-02-06T20:29:33 IST" duration-ms="83" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingTheEditPaymentToPaypalFromReviewOrderPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:29:33 IST" name="afterClass" finished-at="2024-02-06T20:29:33 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ReviewOrderTest.verifyingTheEditPaymentToPaypalFromReviewOrderPage() throws java.lang.InterruptedException,java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:29:33 IST" name="afterMethod" finished-at="2024-02-06T20:29:33 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingTheEditPaymentToPaypalFromReviewOrderPage status=SUCCESS method=ReviewOrderTest.verifyingTheEditPaymentToPaypalFromReviewOrderPage()[pri:0, instance:testScripts.ReviewOrderTest@56da7487] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingTheEditShippingAddressFromReviewOrderPageAndPlaceOrder()[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:29:33 IST" name="verifyingTheEditShippingAddressFromReviewOrderPageAndPlaceOrder" finished-at="2024-02-06T20:30:07 IST" duration-ms="34142" status="FAIL">
          <exception class="org.openqa.selenium.UnhandledAlertException">
            <message>
              <![CDATA[unexpected alert open: {Alert text : We're sorry that your order could not be placed. This probably happened due to a high order volume or temporary connection errors. Please wait a few minutes and resubmit your order. We won't process your payment until you successfully place your order. If you have further questions, please contact us.}
  (Session info: chrome=121.0.6167.140): We're sorry that your order could not be placed. This probably happened due to a high order volume or temporary connection errors. Please wait a few minutes and resubmit your order. We won't process your payment until you successfully place your order. If you have further questions, please contact us.
Build info: version: '4.16.1', revision: '9b4c83354e'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [4b0bac046bfaa81710643379bc08bb9b, findElement {using=xpath, value=//h2[@class='order-thank-you-msg']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 121.0.6167.140, chrome: {chromedriverVersion: 121.0.6167.85 (3f98d690ad7e..., userDataDir: C:\Users\user\AppData\Local...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:56069}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:56069/devtoo..., se:cdpVersion: 121.0.6167.140, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 4b0bac046bfaa81710643379bc08bb9b]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.UnhandledAlertException: unexpected alert open: {Alert text : We're sorry that your order could not be placed. This probably happened due to a high order volume or temporary connection errors. Please wait a few minutes and resubmit your order. We won't process your payment until you successfully place your order. If you have further questions, please contact us.}
  (Session info: chrome=121.0.6167.140): We're sorry that your order could not be placed. This probably happened due to a high order volume or temporary connection errors. Please wait a few minutes and resubmit your order. We won't process your payment until you successfully place your order. If you have further questions, please contact us.
Build info: version: '4.16.1', revision: '9b4c83354e'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [4b0bac046bfaa81710643379bc08bb9b, findElement {using=xpath, value=//h2[@class='order-thank-you-msg']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 121.0.6167.140, chrome: {chromedriverVersion: 121.0.6167.85 (3f98d690ad7e..., userDataDir: C:\Users\user\AppData\Local...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:56069}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:56069/devtoo..., se:cdpVersion: 121.0.6167.140, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 4b0bac046bfaa81710643379bc08bb9b
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:131)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:200)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:175)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:523)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:360)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:354)
at validations.PaymentPageValidation.VerifiedThatPlaceOrderClick(PaymentPageValidation.java:191)
at tasks.ReviewOrderPageTask.placeOrder(ReviewOrderPageTask.java:124)
at tasks.ReviewOrderPageTask.editShippingAddressFromReviewOrderPage(ReviewOrderPageTask.java:142)
at testScripts.ReviewOrderTest.verifyingTheEditShippingAddressFromReviewOrderPageAndPlaceOrder(ReviewOrderTest.java:58)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.UnhandledAlertException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingTheEditShippingAddressFromReviewOrderPageAndPlaceOrder -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:29:33 IST" name="afterClass" finished-at="2024-02-06T20:29:33 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ReviewOrderTest.verifyingTheEditShippingAddressFromReviewOrderPageAndPlaceOrder() throws java.lang.InterruptedException,java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:30:07 IST" name="afterMethod" finished-at="2024-02-06T20:30:11 IST" duration-ms="4342" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingTheEditShippingAddressFromReviewOrderPageAndPlaceOrder status=FAILURE method=ReviewOrderTest.verifyingTheEditShippingAddressFromReviewOrderPageAndPlaceOrder()[pri:0, instance:testScripts.ReviewOrderTest@56da7487] output={null}]]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Cannot invoke "org.openqa.selenium.SearchContext.findElement(org.openqa.selenium.By)" because "this.searchContext" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Cannot invoke "org.openqa.selenium.SearchContext.findElement(org.openqa.selenium.By)" because "this.searchContext" is null
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy14.getWrappedElement(Unknown Source)
at org.openqa.selenium.remote.internal.WebElementToJsonConverter.apply(WebElementToJsonConverter.java:51)
at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)
at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
at org.openqa.selenium.remote.RemoteWebDriver.executeScript(RemoteWebDriver.java:466)
at functionality.Actionsss.javascriptClick(Actionsss.java:69)
at com.providio.testcases.baseClass.afterMethod(baseClass.java:290)
at jdk.internal.reflect.GeneratedMethodAccessor14.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:69)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:361)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:296)
at org.testng.internal.invokers.TestInvoker.runConfigMethods(TestInvoker.java:823)
at org.testng.internal.invokers.TestInvoker.runAfterConfigurations(TestInvoker.java:792)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:768)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:30:11 IST" name="afterClass" finished-at="2024-02-06T20:30:11 IST" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingTheEditBillingAddressFromReviewOrderPageAndPlaceOrder()[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:30:11 IST" name="verifyingTheEditBillingAddressFromReviewOrderPageAndPlaceOrder" finished-at="2024-02-06T20:30:11 IST" duration-ms="0" status="SKIP">
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Cannot invoke "org.openqa.selenium.SearchContext.findElement(org.openqa.selenium.By)" because "this.searchContext" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Cannot invoke "org.openqa.selenium.SearchContext.findElement(org.openqa.selenium.By)" because "this.searchContext" is null
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy14.getWrappedElement(Unknown Source)
at org.openqa.selenium.remote.internal.WebElementToJsonConverter.apply(WebElementToJsonConverter.java:51)
at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)
at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
at org.openqa.selenium.remote.RemoteWebDriver.executeScript(RemoteWebDriver.java:466)
at functionality.Actionsss.javascriptClick(Actionsss.java:69)
at com.providio.testcases.baseClass.afterMethod(baseClass.java:290)
at jdk.internal.reflect.GeneratedMethodAccessor14.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:69)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:361)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:296)
at org.testng.internal.invokers.TestInvoker.runConfigMethods(TestInvoker.java:823)
at org.testng.internal.invokers.TestInvoker.runAfterConfigurations(TestInvoker.java:792)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:768)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingTheEditBillingAddressFromReviewOrderPageAndPlaceOrder -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ReviewOrderTest@56da7487]" started-at="2024-02-06T20:30:11 IST" name="afterMethod" finished-at="2024-02-06T20:30:11 IST" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.ReviewOrderTest -->
      <class name="OrderRegression.PlaceOrderWithBuyNowPopUp">
        <test-method is-config="true" signature="setUp()[pri:0, instance:OrderRegression.PlaceOrderWithBuyNowPopUp@53b7ce6]" started-at="2024-02-06T20:31:43 IST" name="setUp" finished-at="2024-02-06T20:31:45 IST" duration-ms="2010" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyingPlacingOrderWithBuyNowPopUp()[pri:0, instance:OrderRegression.PlaceOrderWithBuyNowPopUp@53b7ce6]" started-at="2024-02-06T20:31:45 IST" name="verifyingPlacingOrderWithBuyNowPopUp" finished-at="2024-02-06T20:33:11 IST" duration-ms="86488" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingPlacingOrderWithBuyNowPopUp -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:OrderRegression.PlaceOrderWithBuyNowPopUp@53b7ce6]" started-at="2024-02-06T20:31:45 IST" name="afterClass" finished-at="2024-02-06T20:31:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void OrderRegression.PlaceOrderWithBuyNowPopUp.verifyingPlacingOrderWithBuyNowPopUp() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:OrderRegression.PlaceOrderWithBuyNowPopUp@53b7ce6]" started-at="2024-02-06T20:33:11 IST" name="afterMethod" finished-at="2024-02-06T20:33:11 IST" duration-ms="63" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingPlacingOrderWithBuyNowPopUp status=SUCCESS method=PlaceOrderWithBuyNowPopUp.verifyingPlacingOrderWithBuyNowPopUp()[pri:0, instance:OrderRegression.PlaceOrderWithBuyNowPopUp@53b7ce6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- OrderRegression.PlaceOrderWithBuyNowPopUp -->
      <class name="testScripts.FindAStoreTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.FindAStoreTest@5a6d30e2]" started-at="2024-02-06T20:05:05 IST" name="setUp" finished-at="2024-02-06T20:05:07 IST" duration-ms="2024" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyFindAStore()[pri:0, instance:testScripts.FindAStoreTest@5a6d30e2]" started-at="2024-02-06T20:05:07 IST" name="verifyFindAStore" finished-at="2024-02-06T20:05:19 IST" duration-ms="12375" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyFindAStore -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.FindAStoreTest@5a6d30e2]" started-at="2024-02-06T20:05:07 IST" name="afterClass" finished-at="2024-02-06T20:05:07 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.FindAStoreTest.verifyFindAStore() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.FindAStoreTest@5a6d30e2]" started-at="2024-02-06T20:05:19 IST" name="afterMethod" finished-at="2024-02-06T20:05:19 IST" duration-ms="14" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyFindAStore status=SUCCESS method=FindAStoreTest.verifyFindAStore()[pri:0, instance:testScripts.FindAStoreTest@5a6d30e2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.FindAStoreTest -->
      <class name="OrderRegression.PlaceOrderWithBuyNowButton">
        <test-method is-config="true" signature="setUp()[pri:0, instance:OrderRegression.PlaceOrderWithBuyNowButton@36480b2d]" started-at="2024-02-06T20:33:11 IST" name="setUp" finished-at="2024-02-06T20:33:13 IST" duration-ms="2007" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyingPlacingOrderWithBuyNowButtonWithCreditCard()[pri:0, instance:OrderRegression.PlaceOrderWithBuyNowButton@36480b2d]" started-at="2024-02-06T20:33:13 IST" name="verifyingPlacingOrderWithBuyNowButtonWithCreditCard" finished-at="2024-02-06T20:34:41 IST" duration-ms="87931" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingPlacingOrderWithBuyNowButtonWithCreditCard -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:OrderRegression.PlaceOrderWithBuyNowButton@36480b2d]" started-at="2024-02-06T20:33:13 IST" name="afterClass" finished-at="2024-02-06T20:33:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void OrderRegression.PlaceOrderWithBuyNowButton.verifyingPlacingOrderWithBuyNowButtonWithCreditCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:OrderRegression.PlaceOrderWithBuyNowButton@36480b2d]" started-at="2024-02-06T20:34:41 IST" name="afterMethod" finished-at="2024-02-06T20:34:41 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingPlacingOrderWithBuyNowButtonWithCreditCard status=SUCCESS method=PlaceOrderWithBuyNowButton.verifyingPlacingOrderWithBuyNowButtonWithCreditCard()[pri:0, instance:OrderRegression.PlaceOrderWithBuyNowButton@36480b2d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- OrderRegression.PlaceOrderWithBuyNowButton -->
      <class name="testScripts.ShippingPageTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:10:08 IST" name="setUp" finished-at="2024-02-06T20:10:10 IST" duration-ms="2013" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyingTheCustomerInfoInCheckoutPage2()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:10:10 IST" name="verifyingTheCustomerInfoInCheckoutPage2" finished-at="2024-02-06T20:11:22 IST" duration-ms="72623" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingTheCustomerInfoInCheckoutPage2 -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:10:10 IST" name="afterClass" finished-at="2024-02-06T20:10:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingTheCustomerInfoInCheckoutPage2() throws java.lang.InterruptedException,java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:11:22 IST" name="afterMethod" finished-at="2024-02-06T20:11:22 IST" duration-ms="10" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingTheCustomerInfoInCheckoutPage2 status=SUCCESS method=ShippingPageTest.verifyingTheCustomerInfoInCheckoutPage2()[pri:0, instance:testScripts.ShippingPageTest@2b680207] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingBackToCartFromShippingPage()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:11:22 IST" name="verifyingBackToCartFromShippingPage" finished-at="2024-02-06T20:11:30 IST" duration-ms="7714" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingBackToCartFromShippingPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:11:22 IST" name="afterClass" finished-at="2024-02-06T20:11:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingBackToCartFromShippingPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:11:30 IST" name="afterMethod" finished-at="2024-02-06T20:11:30 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingBackToCartFromShippingPage status=SUCCESS method=ShippingPageTest.verifyingBackToCartFromShippingPage()[pri:0, instance:testScripts.ShippingPageTest@2b680207] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingPaginationOfProductsInCheckOutPage2()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:11:30 IST" name="verifyingPaginationOfProductsInCheckOutPage2" finished-at="2024-02-06T20:12:59 IST" duration-ms="88677" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingPaginationOfProductsInCheckOutPage2 -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:11:30 IST" name="afterClass" finished-at="2024-02-06T20:11:30 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingPaginationOfProductsInCheckOutPage2() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:12:59 IST" name="afterMethod" finished-at="2024-02-06T20:12:59 IST" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingPaginationOfProductsInCheckOutPage2 status=SUCCESS method=ShippingPageTest.verifyingPaginationOfProductsInCheckOutPage2()[pri:0, instance:testScripts.ShippingPageTest@2b680207] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:12:59 IST" name="afterClass" finished-at="2024-02-06T20:12:59 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingOrderSummaryDisplayInShippingPageTasks_Page() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingOrderSummaryDisplayInShippingPageTasks_Page()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:12:59 IST" name="verifyingOrderSummaryDisplayInShippingPageTasks_Page" finished-at="2024-02-06T20:12:59 IST" duration-ms="85" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderSummaryDisplayInShippingPageTasks_Page -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:12:59 IST" name="afterMethod" finished-at="2024-02-06T20:12:59 IST" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingOrderSummaryDisplayInShippingPageTasks_Page status=SUCCESS method=ShippingPageTest.verifyingOrderSummaryDisplayInShippingPageTasks_Page()[pri:0, instance:testScripts.ShippingPageTest@2b680207] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingNextPaymentButtonDisplayInShippingPageTasks_Page()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:12:59 IST" name="verifyingNextPaymentButtonDisplayInShippingPageTasks_Page" finished-at="2024-02-06T20:12:59 IST" duration-ms="66" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingNextPaymentButtonDisplayInShippingPageTasks_Page -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:12:59 IST" name="afterClass" finished-at="2024-02-06T20:12:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingNextPaymentButtonDisplayInShippingPageTasks_Page() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:12:59 IST" name="afterMethod" finished-at="2024-02-06T20:12:59 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingNextPaymentButtonDisplayInShippingPageTasks_Page status=SUCCESS method=ShippingPageTest.verifyingNextPaymentButtonDisplayInShippingPageTasks_Page()[pri:0, instance:testScripts.ShippingPageTest@2b680207] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingEtgLogoDisplayInShippingPageTasks_Page()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:12:59 IST" name="verifyingEtgLogoDisplayInShippingPageTasks_Page" finished-at="2024-02-06T20:12:59 IST" duration-ms="62" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingEtgLogoDisplayInShippingPageTasks_Page -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:12:59 IST" name="afterClass" finished-at="2024-02-06T20:12:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingEtgLogoDisplayInShippingPageTasks_Page() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:12:59 IST" name="afterMethod" finished-at="2024-02-06T20:12:59 IST" duration-ms="13" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingEtgLogoDisplayInShippingPageTasks_Page status=SUCCESS method=ShippingPageTest.verifyingEtgLogoDisplayInShippingPageTasks_Page()[pri:0, instance:testScripts.ShippingPageTest@2b680207] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingAllErrorsInShippingForm()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:12:59 IST" name="verifyingAllErrorsInShippingForm" finished-at="2024-02-06T20:13:03 IST" duration-ms="4423" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingAllErrorsInShippingForm -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:12:59 IST" name="afterClass" finished-at="2024-02-06T20:12:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingAllErrorsInShippingForm() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:13:03 IST" name="afterMethod" finished-at="2024-02-06T20:13:03 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingAllErrorsInShippingForm status=SUCCESS method=ShippingPageTest.verifyingAllErrorsInShippingForm()[pri:0, instance:testScripts.ShippingPageTest@2b680207] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:13:03 IST" name="afterClass" finished-at="2024-02-06T20:13:03 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingTheErrorsInFirstName() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingTheErrorsInFirstName()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:13:03 IST" name="verifyingTheErrorsInFirstName" finished-at="2024-02-06T20:13:19 IST" duration-ms="15887" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingTheErrorsInFirstName -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:13:19 IST" name="afterMethod" finished-at="2024-02-06T20:13:19 IST" duration-ms="17" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingTheErrorsInFirstName status=SUCCESS method=ShippingPageTest.verifyingTheErrorsInFirstName()[pri:0, instance:testScripts.ShippingPageTest@2b680207] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:13:19 IST" name="afterClass" finished-at="2024-02-06T20:13:19 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingTheErrorsInLastName() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingTheErrorsInLastName()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:13:19 IST" name="verifyingTheErrorsInLastName" finished-at="2024-02-06T20:13:35 IST" duration-ms="15706" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingTheErrorsInLastName -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:13:35 IST" name="afterMethod" finished-at="2024-02-06T20:13:35 IST" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingTheErrorsInLastName status=SUCCESS method=ShippingPageTest.verifyingTheErrorsInLastName()[pri:0, instance:testScripts.ShippingPageTest@2b680207] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingTheAddressError()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:13:35 IST" name="verifyingTheAddressError" finished-at="2024-02-06T20:13:50 IST" duration-ms="14616" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingTheAddressError -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:13:35 IST" name="afterClass" finished-at="2024-02-06T20:13:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingTheAddressError() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:13:50 IST" name="afterMethod" finished-at="2024-02-06T20:13:50 IST" duration-ms="17" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingTheAddressError status=SUCCESS method=ShippingPageTest.verifyingTheAddressError()[pri:0, instance:testScripts.ShippingPageTest@2b680207] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:13:50 IST" name="afterClass" finished-at="2024-02-06T20:13:50 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingphoneNumberError() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingphoneNumberError()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:13:50 IST" name="verifyingphoneNumberError" finished-at="2024-02-06T20:14:05 IST" duration-ms="15677" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingphoneNumberError -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:14:05 IST" name="afterMethod" finished-at="2024-02-06T20:14:05 IST" duration-ms="19" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingphoneNumberError status=SUCCESS method=ShippingPageTest.verifyingphoneNumberError()[pri:0, instance:testScripts.ShippingPageTest@2b680207] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingWithValidShippingAddress()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:14:05 IST" name="verifyingWithValidShippingAddress" finished-at="2024-02-06T20:14:20 IST" duration-ms="14811" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingWithValidShippingAddress -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:14:05 IST" name="afterClass" finished-at="2024-02-06T20:14:05 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingWithValidShippingAddress() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:14:20 IST" name="afterMethod" finished-at="2024-02-06T20:14:20 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingWithValidShippingAddress status=SUCCESS method=ShippingPageTest.verifyingWithValidShippingAddress()[pri:0, instance:testScripts.ShippingPageTest@2b680207] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingAddNewShippingAddressAndPlaceOrder()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:14:20 IST" name="verifyingAddNewShippingAddressAndPlaceOrder" finished-at="2024-02-06T20:14:20 IST" duration-ms="77" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingAddNewShippingAddressAndPlaceOrder -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:14:20 IST" name="afterClass" finished-at="2024-02-06T20:14:20 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingAddNewShippingAddressAndPlaceOrder() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:14:20 IST" name="afterMethod" finished-at="2024-02-06T20:14:20 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingAddNewShippingAddressAndPlaceOrder status=SUCCESS method=ShippingPageTest.verifyingAddNewShippingAddressAndPlaceOrder()[pri:0, instance:testScripts.ShippingPageTest@2b680207] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingEditEmailFromShippingPageAndPlaceOrder()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:14:20 IST" name="verifyingEditEmailFromShippingPageAndPlaceOrder" finished-at="2024-02-06T20:15:21 IST" duration-ms="60897" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingEditEmailFromShippingPageAndPlaceOrder -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:14:20 IST" name="afterClass" finished-at="2024-02-06T20:14:20 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingEditEmailFromShippingPageAndPlaceOrder() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:15:21 IST" name="afterMethod" finished-at="2024-02-06T20:15:21 IST" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingEditEmailFromShippingPageAndPlaceOrder status=SUCCESS method=ShippingPageTest.verifyingEditEmailFromShippingPageAndPlaceOrder()[pri:0, instance:testScripts.ShippingPageTest@2b680207] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:15:21 IST" name="afterClass" finished-at="2024-02-06T20:15:21 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.ShippingPageTest.verifyingUpdateShippingAddressAndPlaceOrder() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingUpdateShippingAddressAndPlaceOrder()[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:15:21 IST" name="verifyingUpdateShippingAddressAndPlaceOrder" finished-at="2024-02-06T20:16:14 IST" duration-ms="53132" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingUpdateShippingAddressAndPlaceOrder -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.ShippingPageTest@2b680207]" started-at="2024-02-06T20:16:14 IST" name="afterMethod" finished-at="2024-02-06T20:16:14 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingUpdateShippingAddressAndPlaceOrder status=SUCCESS method=ShippingPageTest.verifyingUpdateShippingAddressAndPlaceOrder()[pri:0, instance:testScripts.ShippingPageTest@2b680207] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.ShippingPageTest -->
      <class name="testScripts.PaymentPageTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:16:14 IST" name="setUp" finished-at="2024-02-06T20:16:16 IST" duration-ms="2013" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyingTheCustomerInfoInPaymntPage()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:16:16 IST" name="verifyingTheCustomerInfoInPaymntPage" finished-at="2024-02-06T20:16:18 IST" duration-ms="2107" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingTheCustomerInfoInPaymntPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:16:16 IST" name="afterClass" finished-at="2024-02-06T20:16:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingTheCustomerInfoInPaymntPage() throws java.lang.InterruptedException,java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:16:18 IST" name="afterMethod" finished-at="2024-02-06T20:16:18 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingTheCustomerInfoInPaymntPage status=SUCCESS method=PaymentPageTest.verifyingTheCustomerInfoInPaymntPage()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingPaginationOfProductsInPaymentPage()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:16:18 IST" name="verifyingPaginationOfProductsInPaymentPage" finished-at="2024-02-06T20:18:00 IST" duration-ms="101183" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingPaginationOfProductsInPaymentPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:16:18 IST" name="afterClass" finished-at="2024-02-06T20:16:18 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingPaginationOfProductsInPaymentPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:18:00 IST" name="afterMethod" finished-at="2024-02-06T20:18:00 IST" duration-ms="11" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingPaginationOfProductsInPaymentPage status=SUCCESS method=PaymentPageTest.verifyingPaginationOfProductsInPaymentPage()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingOrderSummaryDisplayInPaymentPage()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:18:00 IST" name="verifyingOrderSummaryDisplayInPaymentPage" finished-at="2024-02-06T20:18:02 IST" duration-ms="2100" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderSummaryDisplayInPaymentPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:18:00 IST" name="afterClass" finished-at="2024-02-06T20:18:00 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingOrderSummaryDisplayInPaymentPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:18:02 IST" name="afterMethod" finished-at="2024-02-06T20:18:02 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingOrderSummaryDisplayInPaymentPage status=SUCCESS method=PaymentPageTest.verifyingOrderSummaryDisplayInPaymentPage()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingEtgLogoDisplayInPaymentPage()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:18:02 IST" name="verifyingEtgLogoDisplayInPaymentPage" finished-at="2024-02-06T20:18:04 IST" duration-ms="2082" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingEtgLogoDisplayInPaymentPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:18:02 IST" name="afterClass" finished-at="2024-02-06T20:18:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingEtgLogoDisplayInPaymentPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:18:04 IST" name="afterMethod" finished-at="2024-02-06T20:18:04 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingEtgLogoDisplayInPaymentPage status=SUCCESS method=PaymentPageTest.verifyingEtgLogoDisplayInPaymentPage()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingPaymentInfoDisplayInPaymentPage()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:18:04 IST" name="verifyingPaymentInfoDisplayInPaymentPage" finished-at="2024-02-06T20:18:06 IST" duration-ms="2092" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingPaymentInfoDisplayInPaymentPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:18:04 IST" name="afterClass" finished-at="2024-02-06T20:18:04 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingPaymentInfoDisplayInPaymentPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:18:06 IST" name="afterMethod" finished-at="2024-02-06T20:18:06 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingPaymentInfoDisplayInPaymentPage status=SUCCESS method=PaymentPageTest.verifyingPaymentInfoDisplayInPaymentPage()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:18:06 IST" name="afterClass" finished-at="2024-02-06T20:18:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingBackToCartInPaymentPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingBackToCartInPaymentPage()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:18:06 IST" name="verifyingBackToCartInPaymentPage" finished-at="2024-02-06T20:18:45 IST" duration-ms="38902" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingBackToCartInPaymentPage -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:18:45 IST" name="afterMethod" finished-at="2024-02-06T20:18:45 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingBackToCartInPaymentPage status=SUCCESS method=PaymentPageTest.verifyingBackToCartInPaymentPage()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingEditCustomerInfoFromPaymentPageAndPlaceOrder()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:18:45 IST" name="verifyingEditCustomerInfoFromPaymentPageAndPlaceOrder" finished-at="2024-02-06T20:19:41 IST" duration-ms="56568" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingEditCustomerInfoFromPaymentPageAndPlaceOrder -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:18:45 IST" name="afterClass" finished-at="2024-02-06T20:18:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.PaymentPageTest.verifyingEditCustomerInfoFromPaymentPageAndPlaceOrder() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:19:41 IST" name="afterMethod" finished-at="2024-02-06T20:19:41 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingEditCustomerInfoFromPaymentPageAndPlaceOrder status=SUCCESS method=PaymentPageTest.verifyingEditCustomerInfoFromPaymentPageAndPlaceOrder()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingUpdateBillingAddressAndPlaceOrder()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:19:41 IST" name="verifyingUpdateBillingAddressAndPlaceOrder" finished-at="2024-02-06T20:21:41 IST" duration-ms="119289" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingUpdateBillingAddressAndPlaceOrder -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:19:41 IST" name="afterClass" finished-at="2024-02-06T20:19:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.PaymentPageTest.verifyingUpdateBillingAddressAndPlaceOrder() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:21:41 IST" name="afterMethod" finished-at="2024-02-06T20:21:41 IST" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingUpdateBillingAddressAndPlaceOrder status=SUCCESS method=PaymentPageTest.verifyingUpdateBillingAddressAndPlaceOrder()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:21:41 IST" name="afterClass" finished-at="2024-02-06T20:21:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.PaymentPageTest.verifyingAddNewBillingAddressFromPaymentPageAndPlaceOrder() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingAddNewBillingAddressFromPaymentPageAndPlaceOrder()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:21:41 IST" name="verifyingAddNewBillingAddressFromPaymentPageAndPlaceOrder" finished-at="2024-02-06T20:24:13 IST" duration-ms="152733" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingAddNewBillingAddressFromPaymentPageAndPlaceOrder -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:24:13 IST" name="afterMethod" finished-at="2024-02-06T20:24:13 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingAddNewBillingAddressFromPaymentPageAndPlaceOrder status=SUCCESS method=PaymentPageTest.verifyingAddNewBillingAddressFromPaymentPageAndPlaceOrder()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingBillingPhoneNumberError()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:24:13 IST" name="verifyingBillingPhoneNumberError" finished-at="2024-02-06T20:25:58 IST" duration-ms="104372" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingBillingPhoneNumberError -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:24:13 IST" name="afterClass" finished-at="2024-02-06T20:24:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.PaymentPageTest.verifyingBillingPhoneNumberError() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:25:58 IST" name="afterMethod" finished-at="2024-02-06T20:25:58 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingBillingPhoneNumberError status=SUCCESS method=PaymentPageTest.verifyingBillingPhoneNumberError()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:25:58 IST" name="afterClass" finished-at="2024-02-06T20:25:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingEnterGiftCodeErrorMsg() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingEnterGiftCodeErrorMsg()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:25:58 IST" name="verifyingEnterGiftCodeErrorMsg" finished-at="2024-02-06T20:26:01 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="3188" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingEnterGiftCodeErrorMsg -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:01 IST" name="afterMethod" finished-at="2024-02-06T20:26:01 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingEnterGiftCodeErrorMsg status=SUCCESS method=PaymentPageTest.verifyingEnterGiftCodeErrorMsg()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:01 IST" name="afterClass" finished-at="2024-02-06T20:26:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingInvalidGcErrorMsg() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingInvalidGcErrorMsg()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:01 IST" name="verifyingInvalidGcErrorMsg" finished-at="2024-02-06T20:26:07 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="6276" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingInvalidGcErrorMsg -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:07 IST" name="afterMethod" finished-at="2024-02-06T20:26:07 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingInvalidGcErrorMsg status=SUCCESS method=PaymentPageTest.verifyingInvalidGcErrorMsg()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:07 IST" name="afterClass" finished-at="2024-02-06T20:26:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCheckBalanceOfValidGc() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingCheckBalanceOfValidGc()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:07 IST" name="verifyingCheckBalanceOfValidGc" finished-at="2024-02-06T20:26:15 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="7369" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCheckBalanceOfValidGc -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:15 IST" name="afterMethod" finished-at="2024-02-06T20:26:15 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCheckBalanceOfValidGc status=SUCCESS method=PaymentPageTest.verifyingCheckBalanceOfValidGc()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingCheckBalanceOfInvalidGcErrorMsg()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:15 IST" name="verifyingCheckBalanceOfInvalidGcErrorMsg" finished-at="2024-02-06T20:26:21 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="6246" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCheckBalanceOfInvalidGcErrorMsg -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:15 IST" name="afterClass" finished-at="2024-02-06T20:26:15 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCheckBalanceOfInvalidGcErrorMsg() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:21 IST" name="afterMethod" finished-at="2024-02-06T20:26:21 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCheckBalanceOfInvalidGcErrorMsg status=SUCCESS method=PaymentPageTest.verifyingCheckBalanceOfInvalidGcErrorMsg()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:21 IST" name="afterClass" finished-at="2024-02-06T20:26:21 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingRemovalOfAppliedGc() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingRemovalOfAppliedGc()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:21 IST" name="verifyingRemovalOfAppliedGc" finished-at="2024-02-06T20:26:28 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="7310" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingRemovalOfAppliedGc -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:28 IST" name="afterMethod" finished-at="2024-02-06T20:26:28 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingRemovalOfAppliedGc status=SUCCESS method=PaymentPageTest.verifyingRemovalOfAppliedGc()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:28 IST" name="afterClass" finished-at="2024-02-06T20:26:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingAllTheErrorsInCreditCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingAllTheErrorsInCreditCard()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:28 IST" name="verifyingAllTheErrorsInCreditCard" finished-at="2024-02-06T20:26:30 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="2170" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingAllTheErrorsInCreditCard -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:30 IST" name="afterMethod" finished-at="2024-02-06T20:26:30 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingAllTheErrorsInCreditCard status=SUCCESS method=PaymentPageTest.verifyingAllTheErrorsInCreditCard()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingCvvAndExpErrorInCreditCard()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:30 IST" name="verifyingCvvAndExpErrorInCreditCard" finished-at="2024-02-06T20:26:33 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="2170" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCvvAndExpErrorInCreditCard -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:30 IST" name="afterClass" finished-at="2024-02-06T20:26:30 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCvvAndExpErrorInCreditCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:33 IST" name="afterMethod" finished-at="2024-02-06T20:26:33 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCvvAndExpErrorInCreditCard status=SUCCESS method=PaymentPageTest.verifyingCvvAndExpErrorInCreditCard()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:33 IST" name="afterClass" finished-at="2024-02-06T20:26:33 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCvvErrorInCreditCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingCvvErrorInCreditCard()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:33 IST" name="verifyingCvvErrorInCreditCard" finished-at="2024-02-06T20:26:35 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="2142" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCvvErrorInCreditCard -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:35 IST" name="afterMethod" finished-at="2024-02-06T20:26:35 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCvvErrorInCreditCard status=SUCCESS method=PaymentPageTest.verifyingCvvErrorInCreditCard()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingCreditcardNumberInValidError()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:35 IST" name="verifyingCreditcardNumberInValidError" finished-at="2024-02-06T20:26:47 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="12489" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCreditcardNumberInValidError -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:35 IST" name="afterClass" finished-at="2024-02-06T20:26:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCreditcardNumberInValidError() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:47 IST" name="afterMethod" finished-at="2024-02-06T20:26:47 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCreditcardNumberInValidError status=SUCCESS method=PaymentPageTest.verifyingCreditcardNumberInValidError()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingCreditCardExpDateInValid()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:47 IST" name="verifyingCreditCardExpDateInValid" finished-at="2024-02-06T20:26:57 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="9473" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCreditCardExpDateInValid -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:47 IST" name="afterClass" finished-at="2024-02-06T20:26:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCreditCardExpDateInValid() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:57 IST" name="afterMethod" finished-at="2024-02-06T20:26:57 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCreditCardExpDateInValid status=SUCCESS method=PaymentPageTest.verifyingCreditCardExpDateInValid()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingCreditCardNumberInCompleteError()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:57 IST" name="verifyingCreditCardNumberInCompleteError" finished-at="2024-02-06T20:27:06 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="9490" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCreditCardNumberInCompleteError -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:26:57 IST" name="afterClass" finished-at="2024-02-06T20:26:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCreditCardNumberInCompleteError() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:27:06 IST" name="afterMethod" finished-at="2024-02-06T20:27:06 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCreditCardNumberInCompleteError status=SUCCESS method=PaymentPageTest.verifyingCreditCardNumberInCompleteError()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingCreditCardInCompleteExpYearError()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:27:06 IST" name="verifyingCreditCardInCompleteExpYearError" finished-at="2024-02-06T20:27:16 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="9536" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCreditCardInCompleteExpYearError -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:27:06 IST" name="afterClass" finished-at="2024-02-06T20:27:06 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCreditCardInCompleteExpYearError() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:27:16 IST" name="afterMethod" finished-at="2024-02-06T20:27:16 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCreditCardInCompleteExpYearError status=SUCCESS method=PaymentPageTest.verifyingCreditCardInCompleteExpYearError()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingCreditCardInCompleteCvvError()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:27:16 IST" name="verifyingCreditCardInCompleteCvvError" finished-at="2024-02-06T20:27:25 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="9432" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCreditCardInCompleteCvvError -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:27:16 IST" name="afterClass" finished-at="2024-02-06T20:27:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCreditCardInCompleteCvvError() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:27:25 IST" name="afterMethod" finished-at="2024-02-06T20:27:25 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCreditCardInCompleteCvvError status=SUCCESS method=PaymentPageTest.verifyingCreditCardInCompleteCvvError()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingAddnewCreditCard()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:27:25 IST" name="verifyingAddnewCreditCard" finished-at="2024-02-06T20:27:27 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="2070" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingAddnewCreditCard -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:27:25 IST" name="afterClass" finished-at="2024-02-06T20:27:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingAddnewCreditCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:27:27 IST" name="afterMethod" finished-at="2024-02-06T20:27:27 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingAddnewCreditCard status=SUCCESS method=PaymentPageTest.verifyingAddnewCreditCard()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingCreditcardWithValidDetails()[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:27:27 IST" name="verifyingCreditcardWithValidDetails" finished-at="2024-02-06T20:27:48 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="20936" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCreditcardWithValidDetails -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:27:27 IST" name="afterClass" finished-at="2024-02-06T20:27:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCreditcardWithValidDetails() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@70887727]" started-at="2024-02-06T20:27:48 IST" name="afterMethod" finished-at="2024-02-06T20:27:48 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCreditcardWithValidDetails status=SUCCESS method=PaymentPageTest.verifyingCreditcardWithValidDetails()[pri:0, instance:testScripts.PaymentPageTest@70887727] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.PaymentPageTest -->
      <class name="testScripts.LogOutTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.LogOutTest@6dcc40f5]" started-at="2024-02-06T20:09:54 IST" name="setUp" finished-at="2024-02-06T20:09:56 IST" duration-ms="2003" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyLogout()[pri:0, instance:testScripts.LogOutTest@6dcc40f5]" started-at="2024-02-06T20:09:56 IST" name="verifyLogout" finished-at="2024-02-06T20:10:08 IST" duration-ms="11612" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLogout -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.LogOutTest@6dcc40f5]" started-at="2024-02-06T20:09:56 IST" name="afterClass" finished-at="2024-02-06T20:09:56 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.LogOutTest.verifyLogout() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.LogOutTest@6dcc40f5]" started-at="2024-02-06T20:10:08 IST" name="afterMethod" finished-at="2024-02-06T20:10:08 IST" duration-ms="10" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyLogout status=SUCCESS method=LogOutTest.verifyLogout()[pri:0, instance:testScripts.LogOutTest@6dcc40f5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.LogOutTest -->
      <class name="testScripts.CreateAccountPageTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8]" started-at="2024-02-06T20:07:42 IST" name="setUp" finished-at="2024-02-06T20:07:44 IST" duration-ms="2011" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8]" started-at="2024-02-06T20:07:44 IST" name="afterClass" finished-at="2024-02-06T20:07:44 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.CreateAccountPageTest.verifyEmailAndConfirmEmail() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyEmailAndConfirmEmail()[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8]" started-at="2024-02-06T20:07:44 IST" name="verifyEmailAndConfirmEmail" finished-at="2024-02-06T20:08:29 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="44607" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEmailAndConfirmEmail -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8]" started-at="2024-02-06T20:08:29 IST" name="afterMethod" finished-at="2024-02-06T20:08:29 IST" duration-ms="11" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEmailAndConfirmEmail status=SUCCESS method=CreateAccountPageTest.verifyEmailAndConfirmEmail()[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyPasswordMismatch()[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8]" started-at="2024-02-06T20:08:29 IST" name="verifyPasswordMismatch" finished-at="2024-02-06T20:08:50 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="21011" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPasswordMismatch -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8]" started-at="2024-02-06T20:08:29 IST" name="afterClass" finished-at="2024-02-06T20:08:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.CreateAccountPageTest.verifyPasswordMismatch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8]" started-at="2024-02-06T20:08:50 IST" name="afterMethod" finished-at="2024-02-06T20:08:50 IST" duration-ms="10" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPasswordMismatch status=SUCCESS method=CreateAccountPageTest.verifyPasswordMismatch()[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyPhoneNumError()[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8]" started-at="2024-02-06T20:08:50 IST" name="verifyPhoneNumError" finished-at="2024-02-06T20:09:11 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="20953" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPhoneNumError -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8]" started-at="2024-02-06T20:08:50 IST" name="afterClass" finished-at="2024-02-06T20:08:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.CreateAccountPageTest.verifyPhoneNumError() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8]" started-at="2024-02-06T20:09:11 IST" name="afterMethod" finished-at="2024-02-06T20:09:11 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPhoneNumError status=SUCCESS method=CreateAccountPageTest.verifyPhoneNumError()[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyEmailformatError()[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8]" started-at="2024-02-06T20:09:11 IST" name="verifyEmailformatError" finished-at="2024-02-06T20:09:32 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="21007" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEmailformatError -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8]" started-at="2024-02-06T20:09:11 IST" name="afterClass" finished-at="2024-02-06T20:09:11 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.CreateAccountPageTest.verifyEmailformatError() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8]" started-at="2024-02-06T20:09:32 IST" name="afterMethod" finished-at="2024-02-06T20:09:32 IST" duration-ms="11" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEmailformatError status=SUCCESS method=CreateAccountPageTest.verifyEmailformatError()[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyCreateAccountWithValidCredentials()[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8]" started-at="2024-02-06T20:09:32 IST" name="verifyCreateAccountWithValidCredentials" finished-at="2024-02-06T20:09:54 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="22391" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateAccountWithValidCredentials -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8]" started-at="2024-02-06T20:09:32 IST" name="afterClass" finished-at="2024-02-06T20:09:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.CreateAccountPageTest.verifyCreateAccountWithValidCredentials() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8]" started-at="2024-02-06T20:09:54 IST" name="afterMethod" finished-at="2024-02-06T20:09:54 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateAccountWithValidCredentials status=SUCCESS method=CreateAccountPageTest.verifyCreateAccountWithValidCredentials()[pri:0, instance:testScripts.CreateAccountPageTest@733aa9d8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.CreateAccountPageTest -->
      <class name="testScripts.LoginPageTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.LoginPageTest@40e37b06]" started-at="2024-02-06T20:06:33 IST" name="setUp" finished-at="2024-02-06T20:06:35 IST" duration-ms="2012" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="VerifyingLoginFailureWithIncorrectCredentials()[pri:0, instance:testScripts.LoginPageTest@40e37b06]" started-at="2024-02-06T20:06:35 IST" name="VerifyingLoginFailureWithIncorrectCredentials" finished-at="2024-02-06T20:06:55 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="19863" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyingLoginFailureWithIncorrectCredentials -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.LoginPageTest@40e37b06]" started-at="2024-02-06T20:06:35 IST" name="afterClass" finished-at="2024-02-06T20:06:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.LoginPageTest.VerifyingLoginFailureWithIncorrectCredentials() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.LoginPageTest@40e37b06]" started-at="2024-02-06T20:06:55 IST" name="afterMethod" finished-at="2024-02-06T20:06:55 IST" duration-ms="10" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyingLoginFailureWithIncorrectCredentials status=SUCCESS method=LoginPageTest.VerifyingLoginFailureWithIncorrectCredentials()[pri:0, instance:testScripts.LoginPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="VerifyingLoginFailureWithEmptyEmailAndPassword()[pri:0, instance:testScripts.LoginPageTest@40e37b06]" started-at="2024-02-06T20:06:55 IST" name="VerifyingLoginFailureWithEmptyEmailAndPassword" finished-at="2024-02-06T20:07:00 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="5208" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyingLoginFailureWithEmptyEmailAndPassword -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.LoginPageTest@40e37b06]" started-at="2024-02-06T20:06:55 IST" name="afterClass" finished-at="2024-02-06T20:06:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.LoginPageTest.VerifyingLoginFailureWithEmptyEmailAndPassword() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.LoginPageTest@40e37b06]" started-at="2024-02-06T20:07:00 IST" name="afterMethod" finished-at="2024-02-06T20:07:00 IST" duration-ms="11" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyingLoginFailureWithEmptyEmailAndPassword status=SUCCESS method=LoginPageTest.VerifyingLoginFailureWithEmptyEmailAndPassword()[pri:0, instance:testScripts.LoginPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="VerifyingLoginFailureWithInvalidEmailFormat()[pri:0, instance:testScripts.LoginPageTest@40e37b06]" started-at="2024-02-06T20:07:00 IST" name="VerifyingLoginFailureWithInvalidEmailFormat" finished-at="2024-02-06T20:07:10 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="9375" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyingLoginFailureWithInvalidEmailFormat -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.LoginPageTest@40e37b06]" started-at="2024-02-06T20:07:00 IST" name="afterClass" finished-at="2024-02-06T20:07:00 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.LoginPageTest.VerifyingLoginFailureWithInvalidEmailFormat() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.LoginPageTest@40e37b06]" started-at="2024-02-06T20:07:10 IST" name="afterMethod" finished-at="2024-02-06T20:07:10 IST" duration-ms="10" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyingLoginFailureWithInvalidEmailFormat status=SUCCESS method=LoginPageTest.VerifyingLoginFailureWithInvalidEmailFormat()[pri:0, instance:testScripts.LoginPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="VerifyingLoginFailureWithEmptyEmail()[pri:0, instance:testScripts.LoginPageTest@40e37b06]" started-at="2024-02-06T20:07:10 IST" name="VerifyingLoginFailureWithEmptyEmail" finished-at="2024-02-06T20:07:19 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="9368" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyingLoginFailureWithEmptyEmail -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.LoginPageTest@40e37b06]" started-at="2024-02-06T20:07:10 IST" name="afterClass" finished-at="2024-02-06T20:07:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.LoginPageTest.VerifyingLoginFailureWithEmptyEmail() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.LoginPageTest@40e37b06]" started-at="2024-02-06T20:07:19 IST" name="afterMethod" finished-at="2024-02-06T20:07:19 IST" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyingLoginFailureWithEmptyEmail status=SUCCESS method=LoginPageTest.VerifyingLoginFailureWithEmptyEmail()[pri:0, instance:testScripts.LoginPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="VerifyingLoginFailureWithEmptyPassword()[pri:0, instance:testScripts.LoginPageTest@40e37b06]" started-at="2024-02-06T20:07:19 IST" name="VerifyingLoginFailureWithEmptyPassword" finished-at="2024-02-06T20:07:28 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="9332" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyingLoginFailureWithEmptyPassword -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.LoginPageTest@40e37b06]" started-at="2024-02-06T20:07:19 IST" name="afterClass" finished-at="2024-02-06T20:07:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.LoginPageTest.VerifyingLoginFailureWithEmptyPassword() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.LoginPageTest@40e37b06]" started-at="2024-02-06T20:07:28 IST" name="afterMethod" finished-at="2024-02-06T20:07:28 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyingLoginFailureWithEmptyPassword status=SUCCESS method=LoginPageTest.VerifyingLoginFailureWithEmptyPassword()[pri:0, instance:testScripts.LoginPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="VerifyingLoginWithValidCredentials()[pri:0, instance:testScripts.LoginPageTest@40e37b06]" started-at="2024-02-06T20:07:28 IST" name="VerifyingLoginWithValidCredentials" finished-at="2024-02-06T20:07:42 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="13622" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyingLoginWithValidCredentials -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.LoginPageTest@40e37b06]" started-at="2024-02-06T20:07:28 IST" name="afterClass" finished-at="2024-02-06T20:07:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.LoginPageTest.VerifyingLoginWithValidCredentials() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.LoginPageTest@40e37b06]" started-at="2024-02-06T20:07:42 IST" name="afterMethod" finished-at="2024-02-06T20:07:42 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyingLoginWithValidCredentials status=SUCCESS method=LoginPageTest.VerifyingLoginWithValidCredentials()[pri:0, instance:testScripts.LoginPageTest@40e37b06] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.LoginPageTest -->
      <class name="testScripts.FooterPageTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.FooterPageTest@b52b755]" started-at="2024-02-06T20:05:19 IST" name="setUp" finished-at="2024-02-06T20:05:21 IST" duration-ms="2014" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyingResourceFooterLinks()[pri:0, instance:testScripts.FooterPageTest@b52b755]" started-at="2024-02-06T20:05:21 IST" name="verifyingResourceFooterLinks" finished-at="2024-02-06T20:05:28 IST" duration-ms="6322" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingResourceFooterLinks -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.FooterPageTest@b52b755]" started-at="2024-02-06T20:05:21 IST" name="afterClass" finished-at="2024-02-06T20:05:21 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.FooterPageTest.verifyingResourceFooterLinks() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.FooterPageTest@b52b755]" started-at="2024-02-06T20:05:28 IST" name="afterMethod" finished-at="2024-02-06T20:05:28 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingResourceFooterLinks status=SUCCESS method=FooterPageTest.verifyingResourceFooterLinks()[pri:0, instance:testScripts.FooterPageTest@b52b755] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.FooterPageTest@b52b755]" started-at="2024-02-06T20:05:28 IST" name="afterClass" finished-at="2024-02-06T20:05:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void testScripts.FooterPageTest.verifyinginvalidEmailInEmailSignUpBox() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyinginvalidEmailInEmailSignUpBox()[pri:0, instance:testScripts.FooterPageTest@b52b755]" started-at="2024-02-06T20:05:28 IST" name="verifyinginvalidEmailInEmailSignUpBox" finished-at="2024-02-06T20:05:31 IST" duration-ms="3271" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyinginvalidEmailInEmailSignUpBox -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.FooterPageTest@b52b755]" started-at="2024-02-06T20:05:31 IST" name="afterMethod" finished-at="2024-02-06T20:05:31 IST" duration-ms="28" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyinginvalidEmailInEmailSignUpBox status=SUCCESS method=FooterPageTest.verifyinginvalidEmailInEmailSignUpBox()[pri:0, instance:testScripts.FooterPageTest@b52b755] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.FooterPageTest -->
      <class name="testScripts.OrderPlacingWithAllPaymentsTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:30:11 IST" name="setUp" finished-at="2024-02-06T20:30:13 IST" duration-ms="2015" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyingOrderIsPlacingWithCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:30:13 IST" name="verifyingOrderIsPlacingWithCreditCard" finished-at="2024-02-06T20:31:41 IST" duration-ms="87812" status="FAIL">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//div[@class='col-sm-7 col-md-8']"}
  (Session info: chrome=121.0.6167.140)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.16.1', revision: '9b4c83354e'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [4b0bac046bfaa81710643379bc08bb9b, findElement {using=xpath, value=//div[@class='col-sm-7 col-md-8']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 121.0.6167.140, chrome: {chromedriverVersion: 121.0.6167.85 (3f98d690ad7e..., userDataDir: C:\Users\user\AppData\Local...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:56069}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:56069/devtoo..., se:cdpVersion: 121.0.6167.140, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 4b0bac046bfaa81710643379bc08bb9b]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//div[@class='col-sm-7 col-md-8']"}
  (Session info: chrome=121.0.6167.140)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.16.1', revision: '9b4c83354e'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [4b0bac046bfaa81710643379bc08bb9b, findElement {using=xpath, value=//div[@class='col-sm-7 col-md-8']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 121.0.6167.140, chrome: {chromedriverVersion: 121.0.6167.85 (3f98d690ad7e..., userDataDir: C:\Users\user\AppData\Local...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:56069}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:56069/devtoo..., se:cdpVersion: 121.0.6167.140, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 4b0bac046bfaa81710643379bc08bb9b
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:200)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:175)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:523)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:360)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:354)
at validations.MiniCartValidation.VerifiedThatViewcartBtnClick(MiniCartValidation.java:28)
at tasks.ViewCartPageTasks.viewCartpage(ViewCartPageTasks.java:42)
at tasks.CheckOutPageTasks.CheckOutPageLoaded(CheckOutPageTasks.java:33)
at tasks.CheckOutPageTasks.GuestMailCheckOut(CheckOutPageTasks.java:39)
at tasks.ShippingPageTasks.shippingPage(ShippingPageTasks.java:32)
at tasks.ShippingPageTasks.enterValidAddress(ShippingPageTasks.java:139)
at tasks.PaymentPageTasks.paymentPageView(PaymentPageTasks.java:40)
at tasks.PaymentPageTasks.creditCardWithValidDetails(PaymentPageTasks.java:262)
at tasks.PlaceOrderWithDifferentPayments.orderPlacingWithCreditCard(PlaceOrderWithDifferentPayments.java:23)
at testScripts.OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCreditCard(OrderPlacingWithAllPaymentsTest.java:13)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderIsPlacingWithCreditCard -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:30:13 IST" name="afterClass" finished-at="2024-02-06T20:30:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCreditCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:41 IST" name="afterMethod" finished-at="2024-02-06T20:31:43 IST" duration-ms="1548" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingOrderIsPlacingWithCreditCard status=FAILURE method=OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41] output={null}]]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Cannot invoke "org.openqa.selenium.SearchContext.findElement(org.openqa.selenium.By)" because "this.searchContext" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Cannot invoke "org.openqa.selenium.SearchContext.findElement(org.openqa.selenium.By)" because "this.searchContext" is null
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy14.getWrappedElement(Unknown Source)
at org.openqa.selenium.remote.internal.WebElementToJsonConverter.apply(WebElementToJsonConverter.java:51)
at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)
at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
at org.openqa.selenium.remote.RemoteWebDriver.executeScript(RemoteWebDriver.java:466)
at functionality.Actionsss.javascriptClick(Actionsss.java:69)
at com.providio.testcases.baseClass.afterMethod(baseClass.java:290)
at jdk.internal.reflect.GeneratedMethodAccessor14.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:69)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:361)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:296)
at org.testng.internal.invokers.TestInvoker.runConfigMethods(TestInvoker.java:823)
at org.testng.internal.invokers.TestInvoker.runAfterConfigurations(TestInvoker.java:792)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:768)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="afterClass" finished-at="2024-02-06T20:31:43 IST" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingOrderIsPlacingWithGiftCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="verifyingOrderIsPlacingWithGiftCard" finished-at="2024-02-06T20:31:43 IST" duration-ms="0" status="SKIP">
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Cannot invoke "org.openqa.selenium.SearchContext.findElement(org.openqa.selenium.By)" because "this.searchContext" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Cannot invoke "org.openqa.selenium.SearchContext.findElement(org.openqa.selenium.By)" because "this.searchContext" is null
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy14.getWrappedElement(Unknown Source)
at org.openqa.selenium.remote.internal.WebElementToJsonConverter.apply(WebElementToJsonConverter.java:51)
at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)
at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
at org.openqa.selenium.remote.RemoteWebDriver.executeScript(RemoteWebDriver.java:466)
at functionality.Actionsss.javascriptClick(Actionsss.java:69)
at com.providio.testcases.baseClass.afterMethod(baseClass.java:290)
at jdk.internal.reflect.GeneratedMethodAccessor14.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:69)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:361)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:296)
at org.testng.internal.invokers.TestInvoker.runConfigMethods(TestInvoker.java:823)
at org.testng.internal.invokers.TestInvoker.runAfterConfigurations(TestInvoker.java:792)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:768)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderIsPlacingWithGiftCard -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="afterMethod" finished-at="2024-02-06T20:31:43 IST" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="afterClass" finished-at="2024-02-06T20:31:43 IST" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingOrderIsPlacingWithPaypalFromCheckoutPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="verifyingOrderIsPlacingWithPaypalFromCheckoutPage" finished-at="2024-02-06T20:31:43 IST" duration-ms="0" status="SKIP">
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Cannot invoke "org.openqa.selenium.SearchContext.findElement(org.openqa.selenium.By)" because "this.searchContext" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Cannot invoke "org.openqa.selenium.SearchContext.findElement(org.openqa.selenium.By)" because "this.searchContext" is null
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy14.getWrappedElement(Unknown Source)
at org.openqa.selenium.remote.internal.WebElementToJsonConverter.apply(WebElementToJsonConverter.java:51)
at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)
at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
at org.openqa.selenium.remote.RemoteWebDriver.executeScript(RemoteWebDriver.java:466)
at functionality.Actionsss.javascriptClick(Actionsss.java:69)
at com.providio.testcases.baseClass.afterMethod(baseClass.java:290)
at jdk.internal.reflect.GeneratedMethodAccessor14.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:69)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:361)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:296)
at org.testng.internal.invokers.TestInvoker.runConfigMethods(TestInvoker.java:823)
at org.testng.internal.invokers.TestInvoker.runAfterConfigurations(TestInvoker.java:792)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:768)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderIsPlacingWithPaypalFromCheckoutPage -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="afterMethod" finished-at="2024-02-06T20:31:43 IST" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="afterClass" finished-at="2024-02-06T20:31:43 IST" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingOrderIsPlacingWithCombinationOfGcAndCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="verifyingOrderIsPlacingWithCombinationOfGcAndCreditCard" finished-at="2024-02-06T20:31:43 IST" duration-ms="0" status="SKIP">
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Cannot invoke "org.openqa.selenium.SearchContext.findElement(org.openqa.selenium.By)" because "this.searchContext" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Cannot invoke "org.openqa.selenium.SearchContext.findElement(org.openqa.selenium.By)" because "this.searchContext" is null
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy14.getWrappedElement(Unknown Source)
at org.openqa.selenium.remote.internal.WebElementToJsonConverter.apply(WebElementToJsonConverter.java:51)
at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)
at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
at org.openqa.selenium.remote.RemoteWebDriver.executeScript(RemoteWebDriver.java:466)
at functionality.Actionsss.javascriptClick(Actionsss.java:69)
at com.providio.testcases.baseClass.afterMethod(baseClass.java:290)
at jdk.internal.reflect.GeneratedMethodAccessor14.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:69)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:361)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:296)
at org.testng.internal.invokers.TestInvoker.runConfigMethods(TestInvoker.java:823)
at org.testng.internal.invokers.TestInvoker.runAfterConfigurations(TestInvoker.java:792)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:768)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderIsPlacingWithCombinationOfGcAndCreditCard -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="afterMethod" finished-at="2024-02-06T20:31:43 IST" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="afterClass" finished-at="2024-02-06T20:31:43 IST" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingOrderIsPlacingWithCombinationOfGcAndPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="verifyingOrderIsPlacingWithCombinationOfGcAndPaypal" finished-at="2024-02-06T20:31:43 IST" duration-ms="0" status="SKIP">
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Cannot invoke "org.openqa.selenium.SearchContext.findElement(org.openqa.selenium.By)" because "this.searchContext" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Cannot invoke "org.openqa.selenium.SearchContext.findElement(org.openqa.selenium.By)" because "this.searchContext" is null
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy14.getWrappedElement(Unknown Source)
at org.openqa.selenium.remote.internal.WebElementToJsonConverter.apply(WebElementToJsonConverter.java:51)
at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)
at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
at org.openqa.selenium.remote.RemoteWebDriver.executeScript(RemoteWebDriver.java:466)
at functionality.Actionsss.javascriptClick(Actionsss.java:69)
at com.providio.testcases.baseClass.afterMethod(baseClass.java:290)
at jdk.internal.reflect.GeneratedMethodAccessor14.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:69)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:361)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:296)
at org.testng.internal.invokers.TestInvoker.runConfigMethods(TestInvoker.java:823)
at org.testng.internal.invokers.TestInvoker.runAfterConfigurations(TestInvoker.java:792)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:768)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderIsPlacingWithCombinationOfGcAndPaypal -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="afterMethod" finished-at="2024-02-06T20:31:43 IST" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="afterClass" finished-at="2024-02-06T20:31:43 IST" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingOrderIsPlacingWithMiniCartPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="verifyingOrderIsPlacingWithMiniCartPaypal" finished-at="2024-02-06T20:31:43 IST" duration-ms="0" status="SKIP">
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Cannot invoke "org.openqa.selenium.SearchContext.findElement(org.openqa.selenium.By)" because "this.searchContext" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Cannot invoke "org.openqa.selenium.SearchContext.findElement(org.openqa.selenium.By)" because "this.searchContext" is null
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy14.getWrappedElement(Unknown Source)
at org.openqa.selenium.remote.internal.WebElementToJsonConverter.apply(WebElementToJsonConverter.java:51)
at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)
at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
at org.openqa.selenium.remote.RemoteWebDriver.executeScript(RemoteWebDriver.java:466)
at functionality.Actionsss.javascriptClick(Actionsss.java:69)
at com.providio.testcases.baseClass.afterMethod(baseClass.java:290)
at jdk.internal.reflect.GeneratedMethodAccessor14.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:69)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:361)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:296)
at org.testng.internal.invokers.TestInvoker.runConfigMethods(TestInvoker.java:823)
at org.testng.internal.invokers.TestInvoker.runAfterConfigurations(TestInvoker.java:792)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:768)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderIsPlacingWithMiniCartPaypal -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="afterMethod" finished-at="2024-02-06T20:31:43 IST" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingOrderIsPlacingWithCartPagePaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="verifyingOrderIsPlacingWithCartPagePaypal" finished-at="2024-02-06T20:31:43 IST" duration-ms="0" status="SKIP">
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Cannot invoke "org.openqa.selenium.SearchContext.findElement(org.openqa.selenium.By)" because "this.searchContext" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Cannot invoke "org.openqa.selenium.SearchContext.findElement(org.openqa.selenium.By)" because "this.searchContext" is null
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy14.getWrappedElement(Unknown Source)
at org.openqa.selenium.remote.internal.WebElementToJsonConverter.apply(WebElementToJsonConverter.java:51)
at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)
at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
at org.openqa.selenium.remote.RemoteWebDriver.executeScript(RemoteWebDriver.java:466)
at functionality.Actionsss.javascriptClick(Actionsss.java:69)
at com.providio.testcases.baseClass.afterMethod(baseClass.java:290)
at jdk.internal.reflect.GeneratedMethodAccessor14.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:69)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:361)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:296)
at org.testng.internal.invokers.TestInvoker.runConfigMethods(TestInvoker.java:823)
at org.testng.internal.invokers.TestInvoker.runAfterConfigurations(TestInvoker.java:792)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:768)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderIsPlacingWithCartPagePaypal -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="afterClass" finished-at="2024-02-06T20:31:43 IST" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="afterMethod" finished-at="2024-02-06T20:31:43 IST" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage" finished-at="2024-02-06T20:31:43 IST" duration-ms="1" status="SKIP">
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Cannot invoke "org.openqa.selenium.SearchContext.findElement(org.openqa.selenium.By)" because "this.searchContext" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Cannot invoke "org.openqa.selenium.SearchContext.findElement(org.openqa.selenium.By)" because "this.searchContext" is null
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy14.getWrappedElement(Unknown Source)
at org.openqa.selenium.remote.internal.WebElementToJsonConverter.apply(WebElementToJsonConverter.java:51)
at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)
at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
at org.openqa.selenium.remote.RemoteWebDriver.executeScript(RemoteWebDriver.java:466)
at functionality.Actionsss.javascriptClick(Actionsss.java:69)
at com.providio.testcases.baseClass.afterMethod(baseClass.java:290)
at jdk.internal.reflect.GeneratedMethodAccessor14.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:69)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:361)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:296)
at org.testng.internal.invokers.TestInvoker.runConfigMethods(TestInvoker.java:823)
at org.testng.internal.invokers.TestInvoker.runAfterConfigurations(TestInvoker.java:792)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:768)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="afterClass" finished-at="2024-02-06T20:31:43 IST" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@599e4d41]" started-at="2024-02-06T20:31:43 IST" name="afterMethod" finished-at="2024-02-06T20:31:43 IST" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.OrderPlacingWithAllPaymentsTest -->
    </test> <!-- Regression Testing -->
  </suite> <!-- Providio Regression Test -->
</testng-results>
