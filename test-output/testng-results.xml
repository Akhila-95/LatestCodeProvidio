<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="23" total="35" passed="11" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-01-25T18:15:03 IST" name="Providio Regression Test" finished-at="2024-01-25T18:26:39 IST" duration-ms="695898">
    <groups>
      <group name="regression">
        <method signature="launchBrowsering.verifyHomePageLaunching()[pri:0, instance:browser.launchBrowsering@60cf62ad]" name="verifyHomePageLaunching" class="browser.launchBrowsering"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithCombinationOfGcAndCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" name="verifingOrderIsPlacingWithCombinationOfGcAndCreditCard" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithCombinationOfGcAndPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" name="verifingOrderIsPlacingWithCombinationOfGcAndPaypal" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" name="verifingOrderIsPlacingWithCreditCard" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithGiftCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" name="verifingOrderIsPlacingWithGiftCard" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithPaypalFromCheckoutPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" name="verifingOrderIsPlacingWithPaypalFromCheckoutPage" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
      </group> <!-- regression -->
      <group name="smoke">
        <method signature="launchBrowsering.verifyHomePageLaunching()[pri:0, instance:browser.launchBrowsering@60cf62ad]" name="verifyHomePageLaunching" class="browser.launchBrowsering"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithCombinationOfGcAndCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" name="verifingOrderIsPlacingWithCombinationOfGcAndCreditCard" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithCombinationOfGcAndPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" name="verifingOrderIsPlacingWithCombinationOfGcAndPaypal" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" name="verifingOrderIsPlacingWithCreditCard" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithGiftCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" name="verifingOrderIsPlacingWithGiftCard" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithPaypalFromCheckoutPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" name="verifingOrderIsPlacingWithPaypalFromCheckoutPage" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
      </group> <!-- smoke -->
    </groups>
    <test started-at="2024-01-25T18:15:03 IST" name="SmokeTest" finished-at="2024-01-25T18:26:39 IST" duration-ms="695898">
      <class name="browser.launchBrowsering">
        <test-method is-config="true" signature="setUpforReport()[pri:0, instance:browser.launchBrowsering@60cf62ad]" started-at="2024-01-25T18:14:56 IST" name="setUpforReport" finished-at="2024-01-25T18:15:03 IST" duration-ms="6512" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpforReport -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:browser.launchBrowsering@60cf62ad]" started-at="2024-01-25T18:15:03 IST" name="setUp" finished-at="2024-01-25T18:15:05 IST" duration-ms="2037" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:browser.launchBrowsering@60cf62ad]" started-at="2024-01-25T18:15:05 IST" name="afterClass" finished-at="2024-01-25T18:15:05 IST" duration-ms="11" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void browser.launchBrowsering.verifyHomePageLaunching() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyHomePageLaunching()[pri:0, instance:browser.launchBrowsering@60cf62ad]" started-at="2024-01-25T18:15:05 IST" name="verifyHomePageLaunching" finished-at="2024-01-25T18:15:11 IST" duration-ms="5690" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyHomePageLaunching -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:browser.launchBrowsering@60cf62ad]" started-at="2024-01-25T18:15:11 IST" name="afterMethod" finished-at="2024-01-25T18:15:11 IST" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyHomePageLaunching status=SUCCESS method=launchBrowsering.verifyHomePageLaunching()[pri:0, instance:browser.launchBrowsering@60cf62ad] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:browser.launchBrowsering@60cf62ad]" started-at="2024-01-25T18:26:39 IST" name="tearDown" finished-at="2024-01-25T18:26:47 IST" duration-ms="7831" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- browser.launchBrowsering -->
      <class name="testScripts.OrderPlacingWithAllPaymentsTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" started-at="2024-01-25T18:17:27 IST" name="setUp" finished-at="2024-01-25T18:17:29 IST" duration-ms="2016" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifingOrderIsPlacingWithCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" started-at="2024-01-25T18:17:29 IST" name="verifingOrderIsPlacingWithCreditCard" finished-at="2024-01-25T18:17:52 IST" duration-ms="22487" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifingOrderIsPlacingWithCreditCard -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" started-at="2024-01-25T18:17:29 IST" name="afterClass" finished-at="2024-01-25T18:17:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithCreditCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" started-at="2024-01-25T18:17:52 IST" name="afterMethod" finished-at="2024-01-25T18:17:52 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifingOrderIsPlacingWithCreditCard status=SUCCESS method=OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifingOrderIsPlacingWithGiftCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" started-at="2024-01-25T18:17:52 IST" name="verifingOrderIsPlacingWithGiftCard" finished-at="2024-01-25T18:20:18 IST" duration-ms="146469" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifingOrderIsPlacingWithGiftCard -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" started-at="2024-01-25T18:17:52 IST" name="afterClass" finished-at="2024-01-25T18:17:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithGiftCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" started-at="2024-01-25T18:20:18 IST" name="afterMethod" finished-at="2024-01-25T18:20:18 IST" duration-ms="11" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifingOrderIsPlacingWithGiftCard status=SUCCESS method=OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithGiftCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifingOrderIsPlacingWithCombinationOfGcAndCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" started-at="2024-01-25T18:20:18 IST" name="verifingOrderIsPlacingWithCombinationOfGcAndCreditCard" finished-at="2024-01-25T18:22:35 IST" duration-ms="136354" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifingOrderIsPlacingWithCombinationOfGcAndCreditCard -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" started-at="2024-01-25T18:20:18 IST" name="afterClass" finished-at="2024-01-25T18:20:18 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithCombinationOfGcAndCreditCard() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" started-at="2024-01-25T18:22:35 IST" name="afterMethod" finished-at="2024-01-25T18:22:35 IST" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifingOrderIsPlacingWithCombinationOfGcAndCreditCard status=SUCCESS method=OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithCombinationOfGcAndCreditCard()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifingOrderIsPlacingWithPaypalFromCheckoutPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" started-at="2024-01-25T18:22:35 IST" name="verifingOrderIsPlacingWithPaypalFromCheckoutPage" finished-at="2024-01-25T18:25:20 IST" duration-ms="164921" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifingOrderIsPlacingWithPaypalFromCheckoutPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" started-at="2024-01-25T18:22:35 IST" name="afterClass" finished-at="2024-01-25T18:22:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithPaypalFromCheckoutPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" started-at="2024-01-25T18:25:20 IST" name="afterMethod" finished-at="2024-01-25T18:25:20 IST" duration-ms="10" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifingOrderIsPlacingWithPaypalFromCheckoutPage status=SUCCESS method=OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithPaypalFromCheckoutPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifingOrderIsPlacingWithCombinationOfGcAndPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" started-at="2024-01-25T18:25:20 IST" name="verifingOrderIsPlacingWithCombinationOfGcAndPaypal" finished-at="2024-01-25T18:26:38 IST" duration-ms="78431" status="FAIL">
          <exception class="org.openqa.selenium.UnhandledAlertException">
            <message>
              <![CDATA[unexpected alert open: {Alert text : No details available for input: "345"}
  (Session info: chrome=120.0.6099.225): No details available for input: "345"
Build info: version: '4.16.1', revision: '9b4c83354e'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [8f6e98d23343ca90aeabe7cabc8a997a, findElement {using=xpath, value=//input[@id='shippingAddressOnedefault']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 120.0.6099.225, chrome: {chromedriverVersion: 120.0.6099.109 (3419140ab66..., userDataDir: C:\Users\user\AppData\Local...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:51992}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:51992/devtoo..., se:cdpVersion: 120.0.6099.225, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 8f6e98d23343ca90aeabe7cabc8a997a]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.UnhandledAlertException: unexpected alert open: {Alert text : No details available for input: "345"}
  (Session info: chrome=120.0.6099.225): No details available for input: "345"
Build info: version: '4.16.1', revision: '9b4c83354e'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [8f6e98d23343ca90aeabe7cabc8a997a, findElement {using=xpath, value=//input[@id='shippingAddressOnedefault']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 120.0.6099.225, chrome: {chromedriverVersion: 120.0.6099.109 (3419140ab66..., userDataDir: C:\Users\user\AppData\Local...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:51992}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:51992/devtoo..., se:cdpVersion: 120.0.6099.225, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 8f6e98d23343ca90aeabe7cabc8a997a
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:131)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:200)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:175)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:523)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:360)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:354)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy17.getAttribute(Unknown Source)
at functionality.Actionsss.addressFromDropDown(Actionsss.java:291)
at data.AddressSelection.Address(AddressSelection.java:30)
at tasks.CheckOutPage2Tasks.enterValidAddress(CheckOutPage2Tasks.java:125)
at tasks.PaymentPageTasks.paymentPageView(PaymentPageTasks.java:38)
at tasks.PaymentPageTasks.gcRedemptionInCombinationWithPaypal(PaymentPageTasks.java:389)
at tasks.PlaceOrderWithDifferentPayments.OrderPlacingWithCombinationOfGcAndPaypal(PlaceOrderWithDifferentPayments.java:110)
at testScripts.OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithCombinationOfGcAndPaypal(OrderPlacingWithAllPaymentsTest.java:35)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.UnhandledAlertException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifingOrderIsPlacingWithCombinationOfGcAndPaypal -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" started-at="2024-01-25T18:25:20 IST" name="afterClass" finished-at="2024-01-25T18:25:20 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithCombinationOfGcAndPaypal() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a]" started-at="2024-01-25T18:26:38 IST" name="afterMethod" finished-at="2024-01-25T18:26:39 IST" duration-ms="455" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifingOrderIsPlacingWithCombinationOfGcAndPaypal status=FAILURE method=OrderPlacingWithAllPaymentsTest.verifingOrderIsPlacingWithCombinationOfGcAndPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@33899f7a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.OrderPlacingWithAllPaymentsTest -->
      <class name="testScripts.PaymentPageTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.PaymentPageTest@4b6d92e]" started-at="2024-01-25T18:15:11 IST" name="setUp" finished-at="2024-01-25T18:15:13 IST" duration-ms="2014" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyingEnterGiftCodeErrorMsg()[pri:0, instance:testScripts.PaymentPageTest@4b6d92e]" started-at="2024-01-25T18:15:13 IST" name="verifyingEnterGiftCodeErrorMsg" finished-at="2024-01-25T18:16:48 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="95538" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingEnterGiftCodeErrorMsg -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@4b6d92e]" started-at="2024-01-25T18:15:13 IST" name="afterClass" finished-at="2024-01-25T18:15:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingEnterGiftCodeErrorMsg() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@4b6d92e]" started-at="2024-01-25T18:16:48 IST" name="afterMethod" finished-at="2024-01-25T18:16:48 IST" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingEnterGiftCodeErrorMsg status=SUCCESS method=PaymentPageTest.verifyingEnterGiftCodeErrorMsg()[pri:0, instance:testScripts.PaymentPageTest@4b6d92e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@4b6d92e]" started-at="2024-01-25T18:16:48 IST" name="afterClass" finished-at="2024-01-25T18:16:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingInvalidGcErrorMsg() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingInvalidGcErrorMsg()[pri:0, instance:testScripts.PaymentPageTest@4b6d92e]" started-at="2024-01-25T18:16:48 IST" name="verifyingInvalidGcErrorMsg" finished-at="2024-01-25T18:16:55 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="6370" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingInvalidGcErrorMsg -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@4b6d92e]" started-at="2024-01-25T18:16:55 IST" name="afterMethod" finished-at="2024-01-25T18:16:55 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingInvalidGcErrorMsg status=SUCCESS method=PaymentPageTest.verifyingInvalidGcErrorMsg()[pri:0, instance:testScripts.PaymentPageTest@4b6d92e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingCheckBalanceOfValidGc()[pri:0, instance:testScripts.PaymentPageTest@4b6d92e]" started-at="2024-01-25T18:16:55 IST" name="verifyingCheckBalanceOfValidGc" finished-at="2024-01-25T18:17:02 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="7432" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCheckBalanceOfValidGc -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@4b6d92e]" started-at="2024-01-25T18:16:55 IST" name="afterClass" finished-at="2024-01-25T18:16:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCheckBalanceOfValidGc() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@4b6d92e]" started-at="2024-01-25T18:17:02 IST" name="afterMethod" finished-at="2024-01-25T18:17:02 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCheckBalanceOfValidGc status=SUCCESS method=PaymentPageTest.verifyingCheckBalanceOfValidGc()[pri:0, instance:testScripts.PaymentPageTest@4b6d92e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@4b6d92e]" started-at="2024-01-25T18:17:02 IST" name="afterClass" finished-at="2024-01-25T18:17:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingCheckBalanceOfInvalidGcErrorMsg() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingCheckBalanceOfInvalidGcErrorMsg()[pri:0, instance:testScripts.PaymentPageTest@4b6d92e]" started-at="2024-01-25T18:17:02 IST" name="verifyingCheckBalanceOfInvalidGcErrorMsg" finished-at="2024-01-25T18:17:08 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="6333" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingCheckBalanceOfInvalidGcErrorMsg -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@4b6d92e]" started-at="2024-01-25T18:17:08 IST" name="afterMethod" finished-at="2024-01-25T18:17:08 IST" duration-ms="27" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingCheckBalanceOfInvalidGcErrorMsg status=SUCCESS method=PaymentPageTest.verifyingCheckBalanceOfInvalidGcErrorMsg()[pri:0, instance:testScripts.PaymentPageTest@4b6d92e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@4b6d92e]" started-at="2024-01-25T18:17:08 IST" name="afterClass" finished-at="2024-01-25T18:17:08 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingSuccesMessageForValidGcApplied() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingSuccesMessageForValidGcApplied()[pri:0, instance:testScripts.PaymentPageTest@4b6d92e]" started-at="2024-01-25T18:17:08 IST" name="verifyingSuccesMessageForValidGcApplied" finished-at="2024-01-25T18:17:15 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="6314" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingSuccesMessageForValidGcApplied -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@4b6d92e]" started-at="2024-01-25T18:17:15 IST" name="afterMethod" finished-at="2024-01-25T18:17:15 IST" duration-ms="13" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingSuccesMessageForValidGcApplied status=SUCCESS method=PaymentPageTest.verifyingSuccesMessageForValidGcApplied()[pri:0, instance:testScripts.PaymentPageTest@4b6d92e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PaymentPageTest@4b6d92e]" started-at="2024-01-25T18:17:15 IST" name="afterClass" finished-at="2024-01-25T18:17:15 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PaymentPageTest.verifyingRemovalOfAppliedGc() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingRemovalOfAppliedGc()[pri:0, instance:testScripts.PaymentPageTest@4b6d92e]" started-at="2024-01-25T18:17:15 IST" name="verifyingRemovalOfAppliedGc" finished-at="2024-01-25T18:17:25 IST" depends-on-methods="browser.launchBrowsering.verifyHomePageLaunching" duration-ms="10433" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingRemovalOfAppliedGc -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PaymentPageTest@4b6d92e]" started-at="2024-01-25T18:17:25 IST" name="afterMethod" finished-at="2024-01-25T18:17:27 IST" duration-ms="2351" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingRemovalOfAppliedGc status=SUCCESS method=PaymentPageTest.verifyingRemovalOfAppliedGc()[pri:0, instance:testScripts.PaymentPageTest@4b6d92e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.PaymentPageTest -->
    </test> <!-- SmokeTest -->
  </suite> <!-- Providio Regression Test -->
</testng-results>
