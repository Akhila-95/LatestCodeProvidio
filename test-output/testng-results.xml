<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="13" total="22" passed="9" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-02-01T00:13:20 IST" name="Providio Regression Test" finished-at="2024-02-01T00:23:24 IST" duration-ms="604050">
    <groups>
      <group name="regression">
        <method signature="launchBrowsering.verifyHomePageLaunching()[pri:0, instance:browser.launchBrowsering@77b919a3]" name="verifyHomePageLaunching" class="browser.launchBrowsering"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCombinationOfGcAndPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" name="verifyingOrderIsPlacingWithCombinationOfGcAndPaypal" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithMiniCartPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" name="verifyingOrderIsPlacingWithMiniCartPaypal" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" name="verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalFromCheckoutPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" name="verifyingOrderIsPlacingWithPaypalFromCheckoutPage" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
      </group> <!-- regression -->
      <group name="smoke">
        <method signature="launchBrowsering.verifyHomePageLaunching()[pri:0, instance:browser.launchBrowsering@77b919a3]" name="verifyHomePageLaunching" class="browser.launchBrowsering"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCombinationOfGcAndPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" name="verifyingOrderIsPlacingWithCombinationOfGcAndPaypal" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithMiniCartPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" name="verifyingOrderIsPlacingWithMiniCartPaypal" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" name="verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
        <method signature="OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalFromCheckoutPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" name="verifyingOrderIsPlacingWithPaypalFromCheckoutPage" class="testScripts.OrderPlacingWithAllPaymentsTest"/>
      </group> <!-- smoke -->
    </groups>
    <test started-at="2024-02-01T00:13:20 IST" name="SmokeTest" finished-at="2024-02-01T00:23:24 IST" duration-ms="604050">
      <class name="browser.launchBrowsering">
        <test-method is-config="true" signature="setUpforReport()[pri:0, instance:browser.launchBrowsering@77b919a3]" started-at="2024-02-01T00:13:13 IST" name="setUpforReport" finished-at="2024-02-01T00:13:20 IST" duration-ms="7741" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpforReport -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:browser.launchBrowsering@77b919a3]" started-at="2024-02-01T00:13:20 IST" name="setUp" finished-at="2024-02-01T00:13:23 IST" duration-ms="2262" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:browser.launchBrowsering@77b919a3]" started-at="2024-02-01T00:13:23 IST" name="afterClass" finished-at="2024-02-01T00:13:23 IST" duration-ms="36" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void browser.launchBrowsering.verifyHomePageLaunching() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyHomePageLaunching()[pri:0, instance:browser.launchBrowsering@77b919a3]" started-at="2024-02-01T00:13:23 IST" name="verifyHomePageLaunching" finished-at="2024-02-01T00:13:29 IST" duration-ms="6525" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyHomePageLaunching -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:browser.launchBrowsering@77b919a3]" started-at="2024-02-01T00:13:29 IST" name="afterMethod" finished-at="2024-02-01T00:13:29 IST" duration-ms="15" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyHomePageLaunching status=SUCCESS method=launchBrowsering.verifyHomePageLaunching()[pri:0, instance:browser.launchBrowsering@77b919a3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:browser.launchBrowsering@77b919a3]" started-at="2024-02-01T00:23:24 IST" name="tearDown" finished-at="2024-02-01T00:23:32 IST" duration-ms="7566" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- browser.launchBrowsering -->
      <class name="testScripts.PlaceOrderTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.PlaceOrderTest@121bb45b]" started-at="2024-02-01T00:13:29 IST" name="setUp" finished-at="2024-02-01T00:13:31 IST" duration-ms="2008" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PlaceOrderTest@121bb45b]" started-at="2024-02-01T00:13:31 IST" name="afterClass" finished-at="2024-02-01T00:13:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PlaceOrderTest.verifyingOrderSummaryDisplayInReviewOrderPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingOrderSummaryDisplayInReviewOrderPage()[pri:0, instance:testScripts.PlaceOrderTest@121bb45b]" started-at="2024-02-01T00:13:31 IST" name="verifyingOrderSummaryDisplayInReviewOrderPage" finished-at="2024-02-01T00:15:16 IST" duration-ms="104424" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderSummaryDisplayInReviewOrderPage -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PlaceOrderTest@121bb45b]" started-at="2024-02-01T00:15:16 IST" name="afterMethod" finished-at="2024-02-01T00:15:16 IST" duration-ms="20" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingOrderSummaryDisplayInReviewOrderPage status=SUCCESS method=PlaceOrderTest.verifyingOrderSummaryDisplayInReviewOrderPage()[pri:0, instance:testScripts.PlaceOrderTest@121bb45b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PlaceOrderTest@121bb45b]" started-at="2024-02-01T00:15:16 IST" name="afterClass" finished-at="2024-02-01T00:15:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PlaceOrderTest.verifyingPaymentInfoDisplayInReviewOrderPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingPaymentInfoDisplayInReviewOrderPage()[pri:0, instance:testScripts.PlaceOrderTest@121bb45b]" started-at="2024-02-01T00:15:16 IST" name="verifyingPaymentInfoDisplayInReviewOrderPage" finished-at="2024-02-01T00:15:16 IST" duration-ms="192" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingPaymentInfoDisplayInReviewOrderPage -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PlaceOrderTest@121bb45b]" started-at="2024-02-01T00:15:16 IST" name="afterMethod" finished-at="2024-02-01T00:15:16 IST" duration-ms="14" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingPaymentInfoDisplayInReviewOrderPage status=SUCCESS method=PlaceOrderTest.verifyingPaymentInfoDisplayInReviewOrderPage()[pri:0, instance:testScripts.PlaceOrderTest@121bb45b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PlaceOrderTest@121bb45b]" started-at="2024-02-01T00:15:16 IST" name="afterClass" finished-at="2024-02-01T00:15:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PlaceOrderTest.verifyingEtgLogoDisplayInReviewOrderPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingEtgLogoDisplayInReviewOrderPage()[pri:0, instance:testScripts.PlaceOrderTest@121bb45b]" started-at="2024-02-01T00:15:16 IST" name="verifyingEtgLogoDisplayInReviewOrderPage" finished-at="2024-02-01T00:15:16 IST" duration-ms="191" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingEtgLogoDisplayInReviewOrderPage -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PlaceOrderTest@121bb45b]" started-at="2024-02-01T00:15:16 IST" name="afterMethod" finished-at="2024-02-01T00:15:16 IST" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingEtgLogoDisplayInReviewOrderPage status=SUCCESS method=PlaceOrderTest.verifyingEtgLogoDisplayInReviewOrderPage()[pri:0, instance:testScripts.PlaceOrderTest@121bb45b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyingTheEditPaymentToPaypalFromReviewOrderPage()[pri:0, instance:testScripts.PlaceOrderTest@121bb45b]" started-at="2024-02-01T00:15:16 IST" name="verifyingTheEditPaymentToPaypalFromReviewOrderPage" finished-at="2024-02-01T00:16:42 IST" duration-ms="86340" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingTheEditPaymentToPaypalFromReviewOrderPage -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.PlaceOrderTest@121bb45b]" started-at="2024-02-01T00:15:16 IST" name="afterClass" finished-at="2024-02-01T00:15:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.PlaceOrderTest.verifyingTheEditPaymentToPaypalFromReviewOrderPage() throws java.lang.InterruptedException,java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.PlaceOrderTest@121bb45b]" started-at="2024-02-01T00:16:42 IST" name="afterMethod" finished-at="2024-02-01T00:16:42 IST" duration-ms="16" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingTheEditPaymentToPaypalFromReviewOrderPage status=SUCCESS method=PlaceOrderTest.verifyingTheEditPaymentToPaypalFromReviewOrderPage()[pri:0, instance:testScripts.PlaceOrderTest@121bb45b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.PlaceOrderTest -->
      <class name="testScripts.OrderPlacingWithAllPaymentsTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" started-at="2024-02-01T00:16:42 IST" name="setUp" finished-at="2024-02-01T00:16:44 IST" duration-ms="2005" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" started-at="2024-02-01T00:16:44 IST" name="afterClass" finished-at="2024-02-01T00:16:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalFromCheckoutPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingOrderIsPlacingWithPaypalFromCheckoutPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" started-at="2024-02-01T00:16:44 IST" name="verifyingOrderIsPlacingWithPaypalFromCheckoutPage" finished-at="2024-02-01T00:19:40 IST" duration-ms="175423" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderIsPlacingWithPaypalFromCheckoutPage -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" started-at="2024-02-01T00:19:40 IST" name="afterMethod" finished-at="2024-02-01T00:19:40 IST" duration-ms="13" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingOrderIsPlacingWithPaypalFromCheckoutPage status=SUCCESS method=OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalFromCheckoutPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" started-at="2024-02-01T00:19:40 IST" name="afterClass" finished-at="2024-02-01T00:19:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCombinationOfGcAndPaypal() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingOrderIsPlacingWithCombinationOfGcAndPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" started-at="2024-02-01T00:19:40 IST" name="verifyingOrderIsPlacingWithCombinationOfGcAndPaypal" finished-at="2024-02-01T00:21:55 IST" duration-ms="134602" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderIsPlacingWithCombinationOfGcAndPaypal -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" started-at="2024-02-01T00:21:55 IST" name="afterMethod" finished-at="2024-02-01T00:21:55 IST" duration-ms="15" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingOrderIsPlacingWithCombinationOfGcAndPaypal status=SUCCESS method=OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithCombinationOfGcAndPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" started-at="2024-02-01T00:21:55 IST" name="afterClass" finished-at="2024-02-01T00:21:55 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithMiniCartPaypal() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingOrderIsPlacingWithMiniCartPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" started-at="2024-02-01T00:21:55 IST" name="verifyingOrderIsPlacingWithMiniCartPaypal" finished-at="2024-02-01T00:23:01 IST" duration-ms="66750" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderIsPlacingWithMiniCartPaypal -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" started-at="2024-02-01T00:23:01 IST" name="afterMethod" finished-at="2024-02-01T00:23:01 IST" duration-ms="17" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingOrderIsPlacingWithMiniCartPaypal status=SUCCESS method=OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithMiniCartPaypal()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass(java.lang.reflect.Method)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" started-at="2024-02-01T00:23:01 IST" name="afterClass" finished-at="2024-02-01T00:23:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" started-at="2024-02-01T00:23:01 IST" name="verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage" finished-at="2024-02-01T00:23:24 IST" duration-ms="22959" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298]" started-at="2024-02-01T00:23:24 IST" name="afterMethod" finished-at="2024-02-01T00:23:24 IST" duration-ms="11" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage status=SUCCESS method=OrderPlacingWithAllPaymentsTest.verifyingOrderIsPlacingWithPaypalBuyNowInPdpPage()[pri:0, instance:testScripts.OrderPlacingWithAllPaymentsTest@4faa298] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.OrderPlacingWithAllPaymentsTest -->
    </test> <!-- SmokeTest -->
  </suite> <!-- Providio Regression Test -->
</testng-results>
